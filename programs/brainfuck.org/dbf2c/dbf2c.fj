// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

add_data 3
loop_start loop_op_12
loop_op_3:
inc_ptr
add_data 5
dec_ptr
dec_data
loop_end loop_op_3
loop_op_12:
add_ptr 2
inc_data
dec_ptr
loop_start loop_op_56
loop_op_17:
add_ptr 2
add_data 4
inc_ptr
add_data 2
inc_ptr
add_data 5
inc_ptr
add_data 5
inc_ptr
inc_data
add_ptr 2
inc_data
dec_ptr
add_data 2
loop_start loop_op_51
loop_op_47:
add_data 2
dec_ptr
loop_end loop_op_47
loop_op_51:
inc_ptr
add_data 253
loop_end loop_op_17
loop_op_56:
inc_ptr
add_data 4
output
add_ptr 3
output
add_data 5
output
inc_ptr
add_data 250
output
dec_ptr
add_data 254
output
add_data 9
output
inc_ptr
inc_data
output
inc_data
output
sub_ptr 4
add_data 253
output
loop_start loop_op_110
loop_op_108:
inc_ptr
loop_end loop_op_108
loop_op_110:
sub_ptr 2
output
sub_ptr 3
output
add_data 249
output
inc_ptr
add_data 4
output
dec_ptr
add_data 5
output
inc_data
output
inc_ptr
add_data 251
output
inc_ptr
inc_data
output
dec_ptr
add_data 4
output
add_ptr 2
add_data 2
output
inc_ptr
add_data 251
output
sub_ptr 3
add_data 251
output
add_data 5
output
add_data 249
output
dec_ptr
add_data 254
output
sub_ptr 3
output
add_ptr 3
output
sub_ptr 2
inc_data
output
inc_ptr
add_data 250
output
dec_data
output
output
add_data 254
output
add_data 3
output
add_data 251
dec_ptr
add_data 2
output
dec_ptr
add_data 254
loop_start loop_op_243
loop_op_238:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_238
loop_op_243:
add_ptr 5
add_data 254
output
add_data 254
output
dec_ptr
add_data 4
output
add_ptr 2
dec_data
output
sub_ptr 3
output
add_ptr 3
add_data 254
output
inc_ptr
output
sub_ptr 4
add_data 251
output
inc_ptr
add_data 252
output
add_data 8
output
add_data 252
dec_ptr
inc_data
output
add_data 9
add_ptr 2
add_data 254
output
inc_data
output
add_data 2
sub_ptr 4
output
loop_start loop_op_334
loop_op_332:
inc_ptr
loop_end loop_op_332
loop_op_334:
dec_ptr
output
add_ptr 2
input
loop_start loop_op_820
loop_op_340:
add_ptr 2
add_data 3
loop_start loop_op_357
loop_op_346:
dec_ptr
add_data 7
inc_ptr
dec_data
loop_end loop_op_346
loop_op_357:
dec_ptr
loop_start loop_op_375
loop_op_359:
dec_ptr
loop_start loop_op_367
loop_op_361:
dec_data
loop_start loop_op_366
loop_op_363:
dec_data
dec_ptr
loop_end loop_op_363
loop_op_366:
loop_end loop_op_361
loop_op_367:
add_ptr 2
loop_start loop_op_372
loop_op_370:
inc_ptr
loop_end loop_op_370
loop_op_372:
dec_ptr
dec_data
loop_end loop_op_359
loop_op_375:
dec_ptr
loop_start loop_op_517
loop_op_377:
dec_ptr
add_data 5
inc_ptr
dec_data
loop_start loop_op_516
loop_op_386:
dec_ptr
add_data 3
inc_ptr
dec_data
loop_start loop_op_515
loop_op_393:
dec_ptr
add_data 254
inc_ptr
dec_data
loop_start loop_op_514
loop_op_399:
dec_ptr
add_data 3
inc_ptr
dec_data
loop_start loop_op_513
loop_op_406:
dec_ptr
add_data 4
loop_start loop_op_427
loop_op_412:
inc_ptr
loop_start loop_op_418
loop_op_414:
dec_data
add_ptr 2
loop_end loop_op_414
loop_op_418:
dec_ptr
loop_start loop_op_423
loop_op_420:
add_ptr 2
loop_end loop_op_420
loop_op_423:
sub_ptr 2
dec_data
loop_end loop_op_412
loop_op_427:
inc_ptr
loop_start loop_op_512
loop_op_429:
dec_ptr
add_data 3
inc_ptr
dec_data
loop_start loop_op_511
loop_op_436:
dec_ptr
add_data 253
inc_ptr
dec_data
loop_start loop_op_510
loop_op_443:
dec_ptr
add_data 4
inc_ptr
dec_data
loop_start loop_op_509
loop_op_451:
dec_ptr
add_data 3
loop_start loop_op_480
loop_op_456:
inc_ptr
loop_start loop_op_471
loop_op_458:
dec_data
loop_start loop_op_470
loop_op_460:
dec_data
loop_start loop_op_469
loop_op_462:
dec_data
loop_start loop_op_468
loop_op_464:
dec_data
add_ptr 2
loop_end loop_op_464
loop_op_468:
loop_end loop_op_462
loop_op_469:
loop_end loop_op_460
loop_op_470:
loop_end loop_op_458
loop_op_471:
dec_ptr
loop_start loop_op_476
loop_op_473:
add_ptr 2
loop_end loop_op_473
loop_op_476:
sub_ptr 2
dec_data
loop_end loop_op_456
loop_op_480:
inc_ptr
loop_start loop_op_508
loop_op_482:
dec_ptr
inc_data
inc_ptr
dec_data
loop_start loop_op_507
loop_op_487:
dec_ptr
dec_data
inc_ptr
dec_data
loop_start loop_op_506
loop_op_492:
dec_ptr
add_data 2
inc_ptr
dec_data
loop_start loop_op_505
loop_op_498:
dec_ptr
set_data 0
inc_ptr
dec_data
loop_end loop_op_498
loop_op_505:
loop_end loop_op_492
loop_op_506:
loop_end loop_op_487
loop_op_507:
loop_end loop_op_482
loop_op_508:
loop_end loop_op_451
loop_op_509:
loop_end loop_op_443
loop_op_510:
loop_end loop_op_436
loop_op_511:
loop_end loop_op_429
loop_op_512:
loop_end loop_op_406
loop_op_513:
loop_end loop_op_399
loop_op_514:
loop_end loop_op_393
loop_op_515:
loop_end loop_op_386
loop_op_516:
loop_end loop_op_377
loop_op_517:
dec_ptr
loop_start loop_op_817
loop_op_519:
dec_data
loop_start loop_op_530
loop_op_521:
dec_data
loop_start loop_op_528
loop_op_523:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_523
loop_op_528:
inc_ptr
loop_end loop_op_521
loop_op_530:
dec_ptr
loop_start loop_op_589
loop_op_532:
sub_ptr 4
output
inc_ptr
add_data 3
output
inc_data
output
add_data 3
output
add_data 249
output
inc_ptr
add_data 253
output
add_data 2
output
dec_ptr
output
inc_ptr
dec_data
output
add_data 2
sub_ptr 4
output
loop_start loop_op_579
loop_op_577:
inc_ptr
loop_end loop_op_577
loop_op_579:
add_ptr 9
loop_end loop_op_532
loop_op_589:
dec_ptr
loop_start loop_op_612
loop_op_591:
loop_start loop_op_594
loop_op_592:
dec_ptr
loop_end loop_op_592
loop_op_594:
inc_ptr
add_data 2
output
add_data 254
loop_start loop_op_603
loop_op_601:
inc_ptr
loop_end loop_op_601
loop_op_603:
add_ptr 8
loop_end loop_op_591
loop_op_612:
dec_ptr
loop_start loop_op_629
loop_op_614:
sub_ptr 2
add_data 2
output
output
add_data 254
add_ptr 6
loop_end loop_op_614
loop_op_629:
dec_ptr
loop_start loop_op_641
loop_op_631:
sub_ptr 2
output
output
add_ptr 5
loop_end loop_op_631
loop_op_641:
dec_ptr
loop_start loop_op_655
loop_op_643:
sub_ptr 2
output
output
dec_data
output
inc_data
add_ptr 4
loop_end loop_op_643
loop_op_655:
dec_ptr
loop_start loop_op_672
loop_op_657:
sub_ptr 2
add_data 2
output
output
add_data 253
output
inc_data
add_ptr 3
loop_end loop_op_657
loop_op_672:
dec_ptr
loop_start loop_op_687
loop_op_674:
sub_ptr 3
output
add_ptr 2
output
add_ptr 5
loop_end loop_op_674
loop_op_687:
dec_ptr
loop_start loop_op_731
loop_op_689:
sub_ptr 4
add_data 251
output
add_data 5
inc_ptr
output
add_data 252
output
add_data 3
output
inc_data
inc_ptr
add_data 253
output
sub_ptr 3
dec_data
output
loop_start loop_op_729
loop_op_727:
inc_ptr
loop_end loop_op_727
loop_op_729:
inc_ptr
loop_end loop_op_689
loop_op_731:
dec_ptr
loop_start loop_op_777
loop_op_733:
sub_ptr 4
output
add_data 251
output
inc_ptr
add_data 4
output
dec_ptr
add_data 2
output
add_data 3
inc_ptr
add_data 252
output
inc_ptr
add_data 253
output
sub_ptr 3
output
dec_data
loop_start loop_op_776
loop_op_774:
inc_ptr
loop_end loop_op_774
loop_op_776:
loop_end loop_op_733
loop_op_777:
dec_ptr
loop_start loop_op_813
loop_op_779:
sub_ptr 5
add_data 252
output
add_ptr 2
output
sub_ptr 2
output
add_data 5
output
add_ptr 3
inc_data
output
add_data 2
inc_ptr
output
add_ptr 2
loop_end loop_op_779
loop_op_813:
dec_ptr
output
inc_ptr
loop_end loop_op_519
loop_op_817:
inc_ptr
input
loop_end loop_op_340
loop_op_820:
sub_ptr 5
output
dec_ptr
inc_data
output
inc_ptr
add_data 4
output
dec_ptr
add_data 252
output
add_ptr 2
add_data 253
output
sub_ptr 3
dec_data
output
add_ptr 3
inc_data
output
inc_ptr
output
inc_ptr
output
loop_start loop_op_864
loop_op_862:
dec_ptr
loop_end loop_op_862
loop_op_864:
inc_ptr
add_data 2
output
loop_start loop_op_871
loop_op_869:
inc_ptr
loop_end loop_op_869
loop_op_871:
dec_ptr
output
inc_ptr
loop_start loop_op_907
loop_op_875:
// Translates brainfuck to C
output
// Assumes no
dec_data
// change
dec_data
// on
dec_data
// EOF or EOF
dec_data
inc_ptr
// 0
output
// Generated C does no
dec_data
// change
dec_data
// on
dec_data
// EOF
input
// and uses unistd
output
// h read and write calls
output
// Daniel B Cristofani (cristofdathevanetdotcom)
// http://www
output
// hevanet
output
// com/cristofd/brainfuck/
loop_end loop_op_875
loop_op_907:

stl.loop


brainfuck_memory:
reserve dw * 30000
