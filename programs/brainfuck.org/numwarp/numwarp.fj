// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

add_ptr 4
inc_data
inc_ptr
add_data 3
inc_ptr
add_data 3
add_ptr 5
add_data 3
loop_start loop_op_534
loop_op_21:
inc_ptr
input
inc_data
inc_ptr
add_data 4
loop_start loop_op_38
loop_op_30:
inc_ptr
add_data 4
dec_ptr
dec_data
loop_end loop_op_30
loop_op_38:
inc_ptr
loop_start loop_op_56
loop_op_40:
sub_ptr 2
loop_start loop_op_49
loop_op_43:
dec_data
loop_start loop_op_48
loop_op_45:
dec_data
inc_ptr
loop_end loop_op_45
loop_op_48:
loop_end loop_op_43
loop_op_49:
inc_ptr
loop_start loop_op_53
loop_op_51:
dec_ptr
loop_end loop_op_51
loop_op_53:
inc_ptr
dec_data
loop_end loop_op_40
loop_op_56:
sub_ptr 2
loop_start loop_op_491
loop_op_59:
inc_ptr
inc_data
inc_ptr
inc_data
add_ptr 2
inc_data
inc_ptr
inc_data
loop_start loop_op_74
loop_op_69:
sub_ptr 4
loop_end loop_op_69
loop_op_74:
dec_ptr
inc_data
add_ptr 2
loop_start loop_op_82
loop_op_79:
inc_data
dec_ptr
loop_end loop_op_79
loop_op_82:
dec_ptr
loop_start loop_op_86
loop_op_84:
inc_ptr
loop_end loop_op_84
loop_op_86:
inc_ptr
inc_data
loop_start loop_op_106
loop_op_89:
loop_start loop_op_94
loop_op_90:
add_ptr 3
loop_end loop_op_90
loop_op_94:
add_ptr 2
inc_data
loop_start loop_op_103
loop_op_98:
sub_ptr 4
loop_end loop_op_98
loop_op_103:
inc_ptr
dec_data
loop_end loop_op_89
loop_op_106:
inc_data
dec_ptr
inc_data
add_ptr 3
dec_data
loop_start loop_op_490
loop_op_114:
sub_ptr 2
inc_data
loop_start loop_op_120
loop_op_118:
inc_ptr
loop_end loop_op_118
loop_op_120:
add_ptr 2
inc_data
sub_ptr 3
inc_data
dec_ptr
inc_data
dec_ptr
add_data 248
loop_start loop_op_489
loop_op_139:
sub_ptr 2
dec_data
sub_ptr 2
inc_data
loop_start loop_op_148
loop_op_146:
inc_ptr
loop_end loop_op_146
loop_op_148:
inc_ptr
inc_data
sub_ptr 2
dec_data
sub_ptr 2
dec_data
loop_start loop_op_488
loop_op_157:
sub_ptr 3
inc_data
dec_ptr
dec_data
loop_start loop_op_167
loop_op_164:
add_ptr 2
loop_end loop_op_164
loop_op_167:
dec_ptr
dec_data
dec_ptr
dec_data
sub_ptr 3
dec_data
dec_ptr
add_data 252
loop_start loop_op_487
loop_op_181:
sub_ptr 3
dec_data
add_ptr 4
inc_data
dec_ptr
dec_data
loop_start loop_op_486
loop_op_193:
sub_ptr 3
inc_data
loop_start loop_op_200
loop_op_198:
inc_ptr
loop_end loop_op_198
loop_op_200:
inc_ptr
inc_data
sub_ptr 2
inc_data
dec_ptr
dec_data
dec_ptr
dec_data
loop_start loop_op_485
loop_op_210:
sub_ptr 2
inc_data
dec_ptr
dec_data
dec_ptr
inc_data
loop_start loop_op_221
loop_op_218:
add_ptr 2
loop_end loop_op_218
loop_op_221:
dec_ptr
inc_data
sub_ptr 4
inc_data
dec_ptr
dec_data
loop_start loop_op_484
loop_op_231:
sub_ptr 2
dec_data
loop_start loop_op_237
loop_op_235:
inc_ptr
loop_end loop_op_235
loop_op_237:
add_ptr 2
dec_data
sub_ptr 3
dec_data
dec_ptr
dec_data
dec_ptr
dec_data
loop_start loop_op_483
loop_op_249:
sub_ptr 3
inc_data
dec_ptr
dec_data
loop_start loop_op_259
loop_op_256:
add_ptr 2
loop_end loop_op_256
loop_op_259:
dec_ptr
inc_data
sub_ptr 3
inc_data
dec_ptr
inc_data
dec_ptr
dec_data
loop_start loop_op_482
loop_op_270:
sub_ptr 4
inc_data
loop_start loop_op_278
loop_op_276:
inc_ptr
loop_end loop_op_276
loop_op_278:
dec_ptr
dec_data
sub_ptr 2
dec_data
loop_start loop_op_481
loop_op_284:
sub_ptr 2
inc_data
loop_start loop_op_290
loop_op_288:
inc_ptr
loop_end loop_op_288
loop_op_290:
add_ptr 2
dec_data
sub_ptr 4
dec_data
dec_ptr
dec_data
loop_start loop_op_480
loop_op_301:
add_ptr 5
inc_data
dec_ptr
dec_data
sub_ptr 3
inc_data
dec_ptr
dec_data
loop_start loop_op_479
loop_op_316:
add_ptr 2
inc_data
sub_ptr 2
dec_data
loop_start loop_op_478
loop_op_323:
sub_ptr 2
dec_data
dec_ptr
dec_data
loop_start loop_op_331
loop_op_329:
inc_ptr
loop_end loop_op_329
loop_op_331:
inc_ptr
inc_data
sub_ptr 2
dec_data
dec_ptr
dec_data
dec_ptr
dec_data
loop_start loop_op_477
loop_op_341:
sub_ptr 2
inc_data
dec_ptr
inc_data
loop_start loop_op_349
loop_op_347:
inc_ptr
loop_end loop_op_347
loop_op_349:
dec_ptr
inc_data
dec_ptr
inc_data
dec_ptr
dec_data
loop_start loop_op_476
loop_op_356:
add_ptr 2
dec_data
dec_ptr
dec_data
dec_ptr
dec_data
loop_start loop_op_475
loop_op_364:
sub_ptr 2
dec_data
loop_start loop_op_370
loop_op_368:
inc_ptr
loop_end loop_op_368
loop_op_370:
dec_ptr
inc_data
dec_ptr
add_data 4
loop_start loop_op_390
loop_op_378:
dec_ptr
add_data 248
inc_ptr
dec_data
loop_end loop_op_378
loop_op_390:
add_data 2
dec_ptr
loop_start loop_op_474
loop_op_394:
sub_ptr 2
inc_data
loop_start loop_op_400
loop_op_398:
inc_ptr
loop_end loop_op_398
loop_op_400:
add_ptr 2
dec_data
dec_ptr
dec_data
sub_ptr 4
dec_data
loop_start loop_op_473
loop_op_411:
sub_ptr 2
dec_data
sub_ptr 2
dec_data
add_ptr 4
dec_data
loop_start loop_op_472
loop_op_423:
sub_ptr 4
inc_data
loop_start loop_op_431
loop_op_429:
inc_ptr
loop_end loop_op_429
loop_op_431:
inc_ptr
inc_data
sub_ptr 4
dec_data
loop_start loop_op_471
loop_op_439:
sub_ptr 2
inc_data
sub_ptr 2
dec_data
loop_start loop_op_449
loop_op_446:
add_ptr 2
loop_end loop_op_446
loop_op_449:
dec_ptr
inc_data
sub_ptr 5
dec_data
loop_start loop_op_470
loop_op_458:
add_ptr 4
dec_data
sub_ptr 3
dec_data
dec_ptr
dec_data
loop_end loop_op_458
loop_op_470:
loop_end loop_op_439
loop_op_471:
loop_end loop_op_423
loop_op_472:
loop_end loop_op_411
loop_op_473:
loop_end loop_op_394
loop_op_474:
loop_end loop_op_364
loop_op_475:
loop_end loop_op_356
loop_op_476:
loop_end loop_op_341
loop_op_477:
loop_end loop_op_323
loop_op_478:
loop_end loop_op_316
loop_op_479:
loop_end loop_op_301
loop_op_480:
loop_end loop_op_284
loop_op_481:
loop_end loop_op_270
loop_op_482:
loop_end loop_op_249
loop_op_483:
loop_end loop_op_231
loop_op_484:
loop_end loop_op_210
loop_op_485:
loop_end loop_op_193
loop_op_486:
loop_end loop_op_181
loop_op_487:
loop_end loop_op_157
loop_op_488:
loop_end loop_op_139
loop_op_489:
loop_end loop_op_114
loop_op_490:
loop_end loop_op_59
loop_op_491:
inc_ptr
loop_start loop_op_532
loop_op_493:
inc_ptr
loop_start loop_op_518
loop_op_495:
loop_start loop_op_516
loop_op_496:
loop_start loop_op_502
loop_op_497:
sub_ptr 4
loop_end loop_op_497
loop_op_502:
inc_ptr
inc_data
add_ptr 2
loop_start loop_op_513
loop_op_507:
add_ptr 5
loop_end loop_op_507
loop_op_513:
dec_ptr
dec_data
loop_end loop_op_496
loop_op_516:
dec_ptr
loop_end loop_op_495
loop_op_518:
add_ptr 3
inc_data
add_ptr 7
inc_data
inc_ptr
loop_end loop_op_493
loop_op_532:
dec_ptr
loop_end loop_op_21
loop_op_534:
dec_ptr
set_data 0
sub_ptr 7
add_data 2
dec_ptr
add_data 3
dec_ptr
add_data 3
loop_start loop_op_718
loop_op_556:
loop_start loop_op_559
loop_op_557:
inc_ptr
loop_end loop_op_557
loop_op_559:
add_ptr 6
add_data 8
loop_start loop_op_590
loop_op_574:
sub_ptr 2
add_data 4
inc_ptr
add_data 6
inc_ptr
dec_data
loop_end loop_op_574
loop_op_590:
dec_ptr
dec_data
sub_ptr 2
loop_start loop_op_606
loop_op_595:
dec_data
loop_start loop_op_605
loop_op_597:
dec_ptr
inc_data
add_ptr 2
output
dec_ptr
dec_data
loop_end loop_op_597
loop_op_605:
loop_end loop_op_595
loop_op_606:
sub_ptr 4
loop_start loop_op_689
loop_op_611:
dec_data
loop_start loop_op_622
loop_op_613:
dec_data
loop_start loop_op_620
loop_op_615:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_615
loop_op_620:
inc_ptr
loop_end loop_op_613
loop_op_622:
add_ptr 5
loop_start loop_op_633
loop_op_628:
output
loop_start loop_op_632
loop_op_630:
inc_ptr
loop_end loop_op_630
loop_op_632:
loop_end loop_op_628
loop_op_633:
sub_ptr 2
loop_start loop_op_641
loop_op_636:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_636
loop_op_641:
add_ptr 3
loop_start loop_op_660
loop_op_645:
sub_ptr 2
add_data 2
loop_start loop_op_656
loop_op_650:
dec_ptr
inc_data
inc_ptr
add_data 254
loop_end loop_op_650
loop_op_656:
add_ptr 2
dec_data
loop_end loop_op_645
loop_op_660:
sub_ptr 2
loop_start loop_op_675
loop_op_663:
dec_data
inc_ptr
inc_data
dec_ptr
loop_start loop_op_674
loop_op_668:
dec_ptr
add_data 2
inc_ptr
dec_data
loop_end loop_op_668
loop_op_674:
loop_end loop_op_663
loop_op_675:
sub_ptr 3
loop_start loop_op_684
loop_op_679:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_679
loop_op_684:
sub_ptr 4
loop_end loop_op_611
loop_op_689:
add_ptr 2
inc_data
add_ptr 3
add_data 254
loop_start loop_op_705
loop_op_698:
dec_ptr
inc_data
inc_ptr
add_data 253
loop_end loop_op_698
loop_op_705:
dec_ptr
output
add_ptr 2
loop_start loop_op_716
loop_op_710:
set_data 0
sub_ptr 2
loop_end loop_op_710
loop_op_716:
dec_ptr
loop_end loop_op_556
loop_op_718:
loop_start loop_op_733
loop_op_719:
// Enter a number using ()
dec_data
output
// /0123456789abcdef and space
input
// and hit return
output
// Daniel B Cristofani (cristofdathevanetdotcom)
// http://www
output
// hevanet
output
// com/cristofd/brainfuck/
loop_end loop_op_719
loop_op_733:

stl.loop


brainfuck_memory:
reserve dw * 30000
