// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

loop_start loop_op_215
loop_op_0:
// The 196
dec_data
// algorithm implemented in brainfuck by Mats Linander
output
// This program reads a number in the form of a string of decimal digits
// terminated by a unix style newline (0x10) and tries to determine if the
// entered number is a lychrel number
output
// A lychrel number is a number which never yields a palindrome when iteratively
// added with its own reversal
output
// The process of iteratively reversing and adding
// until a palindromic number is obtained
input
// is often called the 196
dec_data
// algorithm
output
// The smallest number believed to be a lychrel is 196
output
// Hence the name of the
// algorithm
output
// This program will keep reversing and adding until a palindromic numbers is
// obtained or it runs out of memory
output
// Given x bytes of memory
input
// an approximately
// x/5 digits long number can be calculated
output
// Rows starting with a percent sign ('%') show what the memory is supposed
// to look like at that point of execution
output
// The string ":::" means "
output
output
output
// "
output
add_data 180
// "THE BEER
dec_data
// WARE LICENSE" (Revision 42):
dec_ptr
// matslina (at) kth (dot) se
inc_ptr
// wrote this file
output
// As long as you retain this
// notice you can do whatever you want with this stuff
output
// If we meet some day
input
// and you think this stuff is worth it
input
// you can buy me a beer in return
output
// Mats Linander 2004
dec_data
// 06
dec_data
// 15
add_data 180
loop_end loop_op_0
loop_op_215:
// // Request input; print the string "enter number: "
add_data 10
loop_start loop_op_259
loop_op_227:
dec_data
inc_ptr
add_data 10
inc_ptr
add_data 11
inc_ptr
add_data 3
sub_ptr 3
loop_end loop_op_227
loop_op_259:
inc_ptr
inc_data
output
inc_ptr
output
add_data 6
output
dec_ptr
output
inc_ptr
add_data 254
output
inc_ptr
add_data 2
output
dec_ptr
add_data 252
output
add_data 7
output
add_data 248
output
dec_ptr
add_data 253
output
add_data 3
output
set_data 0
inc_ptr
add_data 5
output
add_data 2
loop_start loop_op_332
loop_op_326:
add_data 254
dec_ptr
inc_data
inc_ptr
loop_end loop_op_326
loop_op_332:
dec_ptr
output
set_data 0
add_ptr 2
output
set_data 0
sub_ptr 3
// // Read a string of numbers and setup memory
// // Let 'A' denote the first number read; 'B' the second; 'Y' the second last
// // and 'Z' the last
// // Note that the string may be of any length so it is possible that A=Y
// // or Z=A and there can be any number of numbers between 'B' and 'Y'
inc_data
add_ptr 2
dec_data
inc_ptr
input
add_data 246
loop_start loop_op_419
loop_op_368:
add_data 254
inc_ptr
add_data 6
loop_start loop_op_388
loop_op_378:
dec_data
dec_ptr
add_data 250
inc_ptr
loop_end loop_op_378
loop_op_388:
dec_ptr
loop_start loop_op_398
loop_op_390:
dec_data
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
loop_end loop_op_390
loop_op_398:
dec_ptr
inc_data
inc_ptr
inc_data
add_ptr 5
input
add_data 246
loop_end loop_op_368
loop_op_419:
sub_ptr 6
loop_start loop_op_432
loop_op_426:
sub_ptr 5
loop_end loop_op_426
loop_op_432:
inc_ptr
dec_data
// % 1 0 0 0 A A 0 1 1 B B 0 1 1 ::: 0 1 1 Y Y 0 1 1 Z Z 0 0 0 :::
// // Main loop
// // Loop while cell (0) is 1
sub_ptr 3
loop_start loop_op_1276
loop_op_441:
// // Move some numbers around
add_ptr 7
loop_start loop_op_557
loop_op_450:
sub_ptr 2
loop_start loop_op_480
loop_op_453:
dec_data
add_ptr 2
loop_start loop_op_463
loop_op_457:
add_ptr 5
loop_end loop_op_457
loop_op_463:
dec_ptr
inc_data
sub_ptr 4
loop_start loop_op_476
loop_op_470:
sub_ptr 5
loop_end loop_op_470
loop_op_476:
add_ptr 3
loop_end loop_op_453
loop_op_480:
add_ptr 2
loop_start loop_op_489
loop_op_483:
add_ptr 5
loop_end loop_op_483
loop_op_489:
sub_ptr 2
loop_start loop_op_519
loop_op_492:
dec_data
sub_ptr 3
loop_start loop_op_503
loop_op_497:
sub_ptr 5
loop_end loop_op_497
loop_op_503:
add_ptr 3
inc_data
add_ptr 2
loop_start loop_op_516
loop_op_510:
add_ptr 5
loop_end loop_op_510
loop_op_516:
sub_ptr 2
loop_end loop_op_492
loop_op_519:
inc_ptr
loop_start loop_op_526
loop_op_521:
dec_data
dec_ptr
inc_data
inc_ptr
loop_end loop_op_521
loop_op_526:
sub_ptr 4
dec_data
sub_ptr 5
loop_start loop_op_543
loop_op_537:
sub_ptr 5
loop_end loop_op_537
loop_op_543:
add_ptr 5
set_data 0
add_ptr 5
loop_end loop_op_450
loop_op_557:
// % 1 0 0 0 A Z 0 0 1 B Y 0 0 1 ::: 0 0 1 Y B 0 0 1 Z A 0 0 0 :::
// // Set some flags
sub_ptr 4
loop_start loop_op_570
loop_op_564:
sub_ptr 5
loop_end loop_op_564
loop_op_570:
sub_ptr 2
inc_data
add_ptr 7
loop_start loop_op_590
loop_op_581:
dec_ptr
inc_data
add_ptr 6
loop_end loop_op_581
loop_op_590:
// % 1 1 0 0 A Z 0 1 1 B Y 0 1 1 ::: 0 1 1 Y B 0 1 1 Z A 0 0 0 :::
// // for all pairs (AZ and BY etc) if they are not equal (A!=Z or B!=Y etc) clear
// // flag in cell (1)
dec_ptr
inc_data
loop_start loop_op_675
loop_op_596:
dec_data
sub_ptr 2
loop_start loop_op_608
loop_op_600:
dec_data
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
loop_end loop_op_600
loop_op_608:
dec_ptr
loop_start loop_op_618
loop_op_610:
dec_data
inc_ptr
inc_data
inc_ptr
dec_data
sub_ptr 2
loop_end loop_op_610
loop_op_618:
inc_ptr
loop_start loop_op_625
loop_op_620:
dec_data
dec_ptr
inc_data
inc_ptr
loop_end loop_op_620
loop_op_625:
add_ptr 2
loop_start loop_op_635
loop_op_628:
dec_data
sub_ptr 2
inc_data
add_ptr 2
loop_end loop_op_628
loop_op_635:
dec_ptr
loop_start loop_op_670
loop_op_637:
set_data 0
sub_ptr 3
loop_start loop_op_650
loop_op_644:
sub_ptr 5
loop_end loop_op_644
loop_op_650:
sub_ptr 2
set_data 0
add_ptr 6
loop_start loop_op_668
loop_op_662:
add_ptr 5
loop_end loop_op_662
loop_op_668:
dec_ptr
loop_end loop_op_637
loop_op_670:
sub_ptr 4
loop_end loop_op_596
loop_op_675:
// % 1 0/1 0 0 A Z 0 0 1 B Y 0 0 1 ::: 0 0 1 Y B 0 0 1 Z A 0 0 0 :::
// // The flag in cell (1) is set if and only if the number is palindromic
// // If it is we clear the flag in cell (0) and the main loop will end
dec_ptr
loop_start loop_op_685
loop_op_680:
dec_data
dec_ptr
dec_data
inc_ptr
loop_end loop_op_680
loop_op_685:
dec_ptr
// % 1/0 0 0 0 A Z 0 0 1 B Y 0 0 1 ::: 0 0 1 Y B 0 0 1 Z A 0 0 0 :::
// // If number is not palindromic we will do some addition
loop_start loop_op_1267
loop_op_689:
// // First output some information on where we are
// // Print the string "AB:::YZ (plus) ZY:::BA = "
add_ptr 8
loop_start loop_op_732
loop_op_700:
sub_ptr 2
add_data 8
loop_start loop_op_721
loop_op_711:
dec_data
dec_ptr
add_data 6
inc_ptr
loop_end loop_op_711
loop_op_721:
dec_ptr
output
add_ptr 8
loop_end loop_op_700
loop_op_732:
add_data 8
loop_start loop_op_764
loop_op_741:
dec_data
dec_ptr
add_data 5
dec_ptr
add_data 4
dec_ptr
add_data 6
add_ptr 3
loop_end loop_op_741
loop_op_764:
sub_ptr 3
output
inc_ptr
output
inc_ptr
add_data 3
output
dec_ptr
output
dec_ptr
output
add_ptr 2
add_data 5
loop_start loop_op_794
loop_op_787:
dec_data
sub_ptr 2
dec_data
add_ptr 2
loop_end loop_op_787
loop_op_794:
dec_ptr
set_data 0
sub_ptr 3
loop_start loop_op_830
loop_op_802:
sub_ptr 3
output
inc_ptr
add_data 8
loop_start loop_op_826
loop_op_816:
dec_data
dec_ptr
add_data 250
inc_ptr
loop_end loop_op_816
loop_op_826:
sub_ptr 3
loop_end loop_op_802
loop_op_830:
add_data 10
loop_start loop_op_856
loop_op_841:
dec_data
dec_ptr
add_data 3
dec_ptr
add_data 6
add_ptr 2
loop_end loop_op_841
loop_op_856:
dec_ptr
add_data 2
output
dec_ptr
inc_data
output
set_data 0
inc_ptr
output
set_data 0
// // Go through all pairs (including the last one)
// // Let 'G' and 'H' represent the pair of numbers we are currently working
// // with in the loop below
add_ptr 6
loop_start loop_op_887
loop_op_881:
add_ptr 5
loop_end loop_op_881
loop_op_887:
inc_data
loop_start loop_op_895
loop_op_889:
sub_ptr 5
loop_end loop_op_889
loop_op_895:
add_ptr 5
loop_start loop_op_1053
loop_op_901:
// % ::: G H 0 0 1 :::
// // Add them and check if the sum is larger than 9
sub_ptr 3
loop_start loop_op_912
loop_op_907:
dec_data
dec_ptr
inc_data
inc_ptr
loop_end loop_op_907
loop_op_912:
inc_ptr
inc_data
sub_ptr 2
loop_start loop_op_929
loop_op_917:
add_ptr 2
dec_data
sub_ptr 2
loop_start loop_op_928
loop_op_923:
dec_data
inc_ptr
inc_data
dec_ptr
loop_end loop_op_923
loop_op_928:
loop_end loop_op_917
loop_op_929:
inc_ptr
loop_start loop_op_936
loop_op_931:
dec_data
dec_ptr
inc_data
inc_ptr
loop_end loop_op_931
loop_op_936:
inc_ptr
loop_start loop_op_945
loop_op_938:
add_ptr 2
dec_data
sub_ptr 2
dec_data
loop_end loop_op_938
loop_op_945:
dec_ptr
add_data 9
loop_start loop_op_1003
loop_op_956:
add_ptr 2
inc_data
sub_ptr 2
dec_data
dec_ptr
dec_data
loop_start loop_op_981
loop_op_965:
add_ptr 3
dec_data
sub_ptr 3
loop_start loop_op_980
loop_op_973:
dec_data
add_ptr 2
inc_data
sub_ptr 2
loop_end loop_op_973
loop_op_980:
loop_end loop_op_965
loop_op_981:
add_ptr 2
loop_start loop_op_991
loop_op_984:
dec_data
sub_ptr 2
inc_data
add_ptr 2
loop_end loop_op_984
loop_op_991:
inc_ptr
loop_start loop_op_1000
loop_op_993:
dec_data
inc_ptr
set_data 0
dec_ptr
loop_end loop_op_993
loop_op_1000:
sub_ptr 2
loop_end loop_op_956
loop_op_1003:
// % ::: G(plus)H(minus)9 0 0 0 1/0 :::
// // The rightmost cell in the list above is 1 iff the sum was larger than 9
// // If it was we add 1 to the next pair of numbers
// // If it was not we restore the sum
dec_ptr
dec_data
add_ptr 3
inc_data
inc_ptr
loop_start loop_op_1023
loop_op_1015:
dec_data
dec_ptr
dec_data
add_ptr 2
inc_data
dec_ptr
loop_end loop_op_1015
loop_op_1023:
inc_data
dec_ptr
loop_start loop_op_1044
loop_op_1026:
dec_data
sub_ptr 3
add_data 10
add_ptr 3
loop_end loop_op_1026
loop_op_1044:
// % ::: G(plus)H 0 0 0 1 :::
// // Do the next pair
add_ptr 6
loop_end loop_op_901
loop_op_1053:
// // After adding we prepare the sum for next iteration in the main loop
// // and print the sum followed by newline
sub_ptr 5
set_data 0
inc_ptr
loop_start loop_op_1073
loop_op_1065:
dec_data
dec_ptr
inc_data
add_ptr 2
inc_data
dec_ptr
loop_end loop_op_1065
loop_op_1073:
inc_ptr
loop_start loop_op_1080
loop_op_1075:
dec_data
dec_ptr
inc_data
inc_ptr
loop_end loop_op_1075
loop_op_1080:
sub_ptr 7
loop_start loop_op_1094
loop_op_1088:
sub_ptr 5
loop_end loop_op_1088
loop_op_1094:
add_ptr 5
loop_start loop_op_1106
loop_op_1100:
add_ptr 5
loop_end loop_op_1100
loop_op_1106:
sub_ptr 5
loop_start loop_op_1169
loop_op_1112:
inc_ptr
loop_start loop_op_1125
loop_op_1114:
dec_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 3
loop_end loop_op_1114
loop_op_1125:
add_ptr 2
loop_start loop_op_1135
loop_op_1128:
dec_data
sub_ptr 2
inc_data
add_ptr 2
loop_end loop_op_1128
loop_op_1135:
add_data 8
loop_start loop_op_1154
loop_op_1144:
dec_data
inc_ptr
add_data 6
dec_ptr
loop_end loop_op_1144
loop_op_1154:
inc_ptr
output
set_data 0
sub_ptr 9
loop_end loop_op_1112
loop_op_1169:
inc_ptr
loop_start loop_op_1182
loop_op_1171:
dec_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 3
loop_end loop_op_1171
loop_op_1182:
add_ptr 2
loop_start loop_op_1192
loop_op_1185:
dec_data
sub_ptr 2
inc_data
add_ptr 2
loop_end loop_op_1185
loop_op_1192:
add_data 8
loop_start loop_op_1211
loop_op_1201:
dec_data
inc_ptr
add_data 6
dec_ptr
loop_end loop_op_1201
loop_op_1211:
inc_ptr
output
set_data 0
inc_ptr
loop_start loop_op_1224
loop_op_1218:
add_ptr 5
loop_end loop_op_1218
loop_op_1224:
sub_ptr 5
loop_start loop_op_1237
loop_op_1230:
dec_ptr
inc_data
sub_ptr 4
loop_end loop_op_1230
loop_op_1237:
sub_ptr 3
add_data 9
output
add_data 247
// % 1 0 0 0 Z' Z' 0 1 1 Y' Y' 0 1 1 ::: 0 1 1 B' B' 0 1 1 A' A' 0 0 0 :::
// // Where the A'B' ::: Y'Z' = AB ::: YZ (plus) ZY ::: BA
// // Go back to the main loop
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_689
loop_op_1267:
inc_ptr
loop_start loop_op_1274
loop_op_1269:
dec_data
dec_ptr
inc_data
inc_ptr
loop_end loop_op_1269
loop_op_1274:
dec_ptr
loop_end loop_op_441
loop_op_1276:
// // We've got a palindrome and have left the main loop
// // Print "Palindrome: A'B':::Y'Z'"
// % 1/0 0 0 0 A Z 0 0 1 B Y 0 0 1 ::: 0 0 1 Y B 0 0 1 Z A 0 0 0 :::
add_data 10
loop_start loop_op_1323
loop_op_1290:
dec_data
inc_ptr
add_data 8
inc_ptr
add_data 11
inc_ptr
add_data 6
sub_ptr 3
loop_end loop_op_1290
loop_op_1323:
inc_ptr
output
dec_ptr
add_data 4
loop_start loop_op_1339
loop_op_1331:
dec_data
inc_ptr
add_data 4
dec_ptr
loop_end loop_op_1331
loop_op_1339:
inc_ptr
inc_data
output
inc_ptr
add_data 254
output
add_data 253
output
add_data 5
output
dec_ptr
add_data 3
output
inc_ptr
add_data 4
output
add_data 253
output
add_data 254
output
dec_ptr
inc_data
output
add_ptr 2
add_data 254
output
add_data 2
loop_start loop_op_1395
loop_op_1385:
add_data 254
sub_ptr 3
inc_data
add_ptr 3
loop_end loop_op_1385
loop_op_1395:
sub_ptr 3
add_data 2
output
add_ptr 3
inc_data
loop_start loop_op_1434
loop_op_1406:
add_ptr 3
add_data 8
loop_start loop_op_1428
loop_op_1418:
dec_data
dec_ptr
add_data 6
inc_ptr
loop_end loop_op_1418
loop_op_1428:
dec_ptr
output
add_ptr 3
loop_end loop_op_1406
loop_op_1434:
add_data 10
output

stl.loop


brainfuck_memory:
reserve dw * 30000
