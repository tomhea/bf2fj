// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

// I just completed my first BrainFuck program
input
// I think it's pretty good
output
// It
// generates the fibonacci number sequence
input
// (for numbers under 100)
output
// Formats
// quite nicely too
output
// Here it is below
input
// with and without comments:
add_data 11
// number of digits to output
inc_ptr
// #1
inc_data
// initial number
add_ptr 4
// #5
add_data 44
// (comma)
inc_ptr
// #6
add_data 32
// (space)
sub_ptr 6
// #0
loop_start loop_op_565
loop_op_123:
inc_ptr
// #1
// copy #1 to #7
loop_start loop_op_145
loop_op_127:
add_ptr 6
inc_data
inc_ptr
inc_data
sub_ptr 7
dec_data
loop_end loop_op_127
loop_op_145:
add_ptr 7
loop_start loop_op_170
loop_op_153:
sub_ptr 7
inc_data
add_ptr 7
dec_data
loop_end loop_op_153
loop_op_170:
dec_ptr
// divide #7 by 10 (begins in #7)
loop_start loop_op_320
loop_op_173:
inc_ptr
add_data 10
// set the divisor #8
loop_start loop_op_255
loop_op_186:
// subtract from the dividend and divisor
dec_data
dec_ptr
dec_data
// if dividend reaches zero break out
// copy dividend to #9
loop_start loop_op_203
loop_op_193:
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_end loop_op_193
loop_op_203:
add_ptr 3
loop_start loop_op_216
loop_op_207:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_207
loop_op_216:
// set #10
inc_data
// if #9 clear #10
dec_ptr
loop_start loop_op_230
loop_op_221:
inc_ptr
set_data 0
dec_ptr
set_data 0
loop_end loop_op_221
loop_op_230:
// if #10 move remaining divisor to #11
inc_ptr
loop_start loop_op_251
loop_op_233:
sub_ptr 2
loop_start loop_op_245
loop_op_236:
add_ptr 3
inc_data
sub_ptr 3
dec_data
loop_end loop_op_236
loop_op_245:
add_ptr 2
set_data 0
loop_end loop_op_233
loop_op_251:
// jump back to #8 (divisor possition)
sub_ptr 2
loop_end loop_op_186
loop_op_255:
// if #11 is empty (no remainder) increment the quotient #12
add_ptr 3
// #11
// copy to #13
loop_start loop_op_272
loop_op_262:
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_end loop_op_262
loop_op_272:
add_ptr 3
loop_start loop_op_285
loop_op_276:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_276
loop_op_285:
// set #14
inc_data
// if #13 clear #14
dec_ptr
loop_start loop_op_299
loop_op_290:
inc_ptr
set_data 0
dec_ptr
set_data 0
loop_end loop_op_290
loop_op_299:
// if #14 increment quotient
inc_ptr
loop_start loop_op_311
loop_op_302:
sub_ptr 2
inc_data
add_ptr 2
set_data 0
loop_end loop_op_302
loop_op_311:
sub_ptr 7
// #7
loop_end loop_op_173
loop_op_320:
// quotient is in #12 and remainder is in #11
add_ptr 5
// #12
// if #12 output value plus offset to ascii 0
loop_start loop_op_382
loop_op_329:
add_data 48
output
set_data 0
loop_end loop_op_329
loop_op_382:
// subtract #11 from 10
add_data 10
// #12 is now 10
dec_ptr
// #11
loop_start loop_op_402
loop_op_397:
dec_data
inc_ptr
dec_data
dec_ptr
loop_end loop_op_397
loop_op_402:
inc_ptr
// #12
// output #12 even if it's zero
add_data 48
output
set_data 0
sub_ptr 11
// #1
// check for final number
// copy #0 to #3
dec_ptr
loop_start loop_op_485
loop_op_473:
add_ptr 3
inc_data
inc_ptr
inc_data
sub_ptr 4
dec_data
loop_end loop_op_473
loop_op_485:
add_ptr 4
loop_start loop_op_501
loop_op_490:
sub_ptr 4
inc_data
add_ptr 4
dec_data
loop_end loop_op_490
loop_op_501:
dec_ptr
dec_data
// #3
// if #3 output (comma) and (space)
loop_start loop_op_518
loop_op_506:
add_ptr 2
output
inc_ptr
output
sub_ptr 3
set_data 0
loop_end loop_op_506
loop_op_518:
sub_ptr 2
// #1
loop_start loop_op_532
loop_op_522:
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_end loop_op_522
loop_op_532:
add_ptr 3
loop_start loop_op_545
loop_op_536:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_536
loop_op_545:
sub_ptr 2
loop_start loop_op_553
loop_op_548:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_548
loop_op_553:
inc_ptr
loop_start loop_op_560
loop_op_555:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_555
loop_op_560:
sub_ptr 3
dec_data
loop_end loop_op_123
loop_op_565:
// And the no comment neat little block:
add_data 11
inc_ptr
inc_data
add_ptr 4
add_data 44
inc_ptr
add_data 32
sub_ptr 6
loop_start loop_op_1077
loop_op_667:
inc_ptr
loop_start loop_op_687
loop_op_669:
add_ptr 6
inc_data
inc_ptr
inc_data
sub_ptr 7
dec_data
loop_end loop_op_669
loop_op_687:
add_ptr 7
loop_start loop_op_712
loop_op_695:
sub_ptr 7
inc_data
add_ptr 7
dec_data
loop_end loop_op_695
loop_op_712:
dec_ptr
loop_start loop_op_846
loop_op_714:
inc_ptr
add_data 10
loop_start loop_op_788
loop_op_726:
dec_data
dec_ptr
dec_data
loop_start loop_op_740
loop_op_730:
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_end loop_op_730
loop_op_740:
add_ptr 3
loop_start loop_op_753
loop_op_744:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_744
loop_op_753:
inc_data
dec_ptr
loop_start loop_op_765
loop_op_756:
inc_ptr
set_data 0
dec_ptr
set_data 0
loop_end loop_op_756
loop_op_765:
inc_ptr
loop_start loop_op_785
loop_op_767:
sub_ptr 2
loop_start loop_op_779
loop_op_770:
add_ptr 3
inc_data
sub_ptr 3
dec_data
loop_end loop_op_770
loop_op_779:
add_ptr 2
set_data 0
loop_end loop_op_767
loop_op_785:
sub_ptr 2
loop_end loop_op_726
loop_op_788:
add_ptr 3
loop_start loop_op_802
loop_op_792:
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_end loop_op_792
loop_op_802:
add_ptr 3
loop_start loop_op_815
loop_op_806:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_806
loop_op_815:
inc_data
dec_ptr
loop_start loop_op_827
loop_op_818:
inc_ptr
set_data 0
dec_ptr
set_data 0
loop_end loop_op_818
loop_op_827:
inc_ptr
loop_start loop_op_838
loop_op_829:
sub_ptr 2
inc_data
add_ptr 2
set_data 0
loop_end loop_op_829
loop_op_838:
sub_ptr 7
loop_end loop_op_714
loop_op_846:
add_ptr 5
loop_start loop_op_905
loop_op_852:
add_data 48
output
set_data 0
loop_end loop_op_852
loop_op_905:
add_data 10
dec_ptr
loop_start loop_op_922
loop_op_917:
dec_data
inc_ptr
dec_data
dec_ptr
loop_end loop_op_917
loop_op_922:
inc_ptr
add_data 48
output
set_data 0
sub_ptr 12
loop_start loop_op_1000
loop_op_988:
add_ptr 3
inc_data
inc_ptr
inc_data
sub_ptr 4
dec_data
loop_end loop_op_988
loop_op_1000:
add_ptr 4
loop_start loop_op_1016
loop_op_1005:
sub_ptr 4
inc_data
add_ptr 4
dec_data
loop_end loop_op_1005
loop_op_1016:
dec_ptr
dec_data
loop_start loop_op_1031
loop_op_1019:
add_ptr 2
output
inc_ptr
output
sub_ptr 3
set_data 0
loop_end loop_op_1019
loop_op_1031:
sub_ptr 2
loop_start loop_op_1044
loop_op_1034:
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_end loop_op_1034
loop_op_1044:
add_ptr 3
loop_start loop_op_1057
loop_op_1048:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_1048
loop_op_1057:
sub_ptr 2
loop_start loop_op_1065
loop_op_1060:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_1060
loop_op_1065:
inc_ptr
loop_start loop_op_1072
loop_op_1067:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_1067
loop_op_1072:
sub_ptr 3
dec_data
loop_end loop_op_667
loop_op_1077:

stl.loop


brainfuck_memory:
reserve dw * 30000
