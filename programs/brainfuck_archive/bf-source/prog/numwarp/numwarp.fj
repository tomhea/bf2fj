// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

add_ptr 4
inc_data
inc_ptr
add_data 3
inc_ptr
add_data 3
add_ptr 5
add_data 3
add_ptr 2
inc_data
loop_start loop_op_643
loop_op_24:
dec_data
input
loop_start loop_op_150
loop_op_27:
add_data 246
loop_start loop_op_149
loop_op_38:
add_data 253
loop_start loop_op_148
loop_op_42:
inc_data
dec_ptr
add_data 4
loop_start loop_op_58
loop_op_49:
inc_ptr
add_data 251
dec_ptr
dec_data
loop_end loop_op_49
loop_op_58:
inc_data
inc_ptr
loop_start loop_op_147
loop_op_61:
dec_ptr
inc_data
inc_ptr
add_data 248
loop_start loop_op_146
loop_op_73:
dec_ptr
inc_data
inc_ptr
dec_data
loop_start loop_op_145
loop_op_78:
add_data 253
add_ptr 2
add_data 13
loop_start loop_op_113
loop_op_97:
sub_ptr 2
loop_start loop_op_106
loop_op_100:
dec_data
dec_ptr
inc_data
add_ptr 2
loop_end loop_op_100
loop_op_106:
inc_ptr
loop_start loop_op_110
loop_op_108:
dec_ptr
loop_end loop_op_108
loop_op_110:
inc_ptr
dec_data
loop_end loop_op_97
loop_op_113:
sub_ptr 2
loop_start loop_op_144
loop_op_116:
inc_data
inc_ptr
add_data 5
loop_start loop_op_136
loop_op_124:
dec_ptr
add_data 248
inc_ptr
dec_data
loop_end loop_op_124
loop_op_136:
dec_ptr
loop_start loop_op_143
loop_op_138:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_138
loop_op_143:
loop_end loop_op_116
loop_op_144:
loop_end loop_op_78
loop_op_145:
loop_end loop_op_73
loop_op_146:
loop_end loop_op_61
loop_op_147:
loop_end loop_op_42
loop_op_148:
loop_end loop_op_38
loop_op_149:
loop_end loop_op_27
loop_op_150:
dec_ptr
loop_start loop_op_641
loop_op_152:
sub_ptr 2
add_data 2
loop_start loop_op_182
loop_op_157:
add_ptr 11
inc_data
sub_ptr 11
dec_data
loop_end loop_op_157
loop_op_182:
sub_ptr 2
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
add_ptr 3
inc_data
inc_ptr
inc_data
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 5
dec_data
loop_start loop_op_597
loop_op_207:
sub_ptr 2
inc_data
add_ptr 3
inc_data
inc_ptr
inc_data
add_ptr 3
inc_data
sub_ptr 5
dec_data
loop_start loop_op_596
loop_op_227:
sub_ptr 4
inc_data
add_ptr 2
dec_data
add_ptr 4
dec_data
add_ptr 2
inc_data
sub_ptr 4
dec_data
loop_start loop_op_595
loop_op_249:
sub_ptr 4
dec_data
inc_ptr
inc_data
add_ptr 4
dec_data
add_ptr 3
dec_data
inc_ptr
dec_data
sub_ptr 5
dec_data
loop_start loop_op_594
loop_op_274:
sub_ptr 3
dec_data
add_ptr 4
inc_data
dec_ptr
dec_data
loop_start loop_op_593
loop_op_286:
sub_ptr 3
inc_data
add_ptr 4
dec_data
inc_ptr
inc_data
add_ptr 2
inc_data
sub_ptr 4
dec_data
loop_start loop_op_592
loop_op_306:
sub_ptr 4
inc_data
inc_ptr
dec_data
inc_ptr
inc_data
add_ptr 3
inc_data
add_ptr 4
inc_data
sub_ptr 5
dec_data
loop_start loop_op_591
loop_op_331:
sub_ptr 2
dec_data
add_ptr 3
dec_data
inc_ptr
dec_data
add_ptr 3
dec_data
sub_ptr 5
dec_data
loop_start loop_op_590
loop_op_351:
sub_ptr 4
dec_data
inc_ptr
inc_data
add_ptr 4
inc_data
inc_ptr
inc_data
add_ptr 3
inc_data
sub_ptr 5
dec_data
loop_start loop_op_589
loop_op_376:
sub_ptr 4
inc_data
add_ptr 6
dec_data
sub_ptr 2
dec_data
loop_start loop_op_588
loop_op_392:
sub_ptr 2
inc_data
add_ptr 3
dec_data
add_ptr 4
dec_data
sub_ptr 5
dec_data
loop_start loop_op_587
loop_op_411:
inc_ptr
inc_data
add_ptr 3
dec_data
inc_ptr
inc_data
sub_ptr 5
dec_data
loop_start loop_op_586
loop_op_426:
add_ptr 2
inc_data
sub_ptr 2
dec_data
loop_start loop_op_585
loop_op_433:
sub_ptr 3
dec_data
inc_ptr
dec_data
add_ptr 3
dec_data
inc_ptr
dec_data
add_ptr 2
inc_data
sub_ptr 4
dec_data
loop_start loop_op_584
loop_op_454:
sub_ptr 3
inc_data
inc_ptr
inc_data
add_ptr 3
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_start loop_op_583
loop_op_470:
inc_ptr
dec_data
inc_ptr
dec_data
sub_ptr 2
dec_data
loop_start loop_op_582
loop_op_478:
sub_ptr 2
dec_data
add_ptr 3
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_start loop_op_581
loop_op_491:
sub_ptr 2
inc_data
add_ptr 6
dec_data
inc_ptr
dec_data
sub_ptr 5
dec_data
loop_start loop_op_580
loop_op_510:
sub_ptr 4
dec_data
add_ptr 2
dec_data
add_ptr 2
dec_data
loop_start loop_op_579
loop_op_522:
sub_ptr 4
inc_data
add_ptr 8
inc_data
sub_ptr 4
dec_data
loop_start loop_op_578
loop_op_542:
sub_ptr 4
dec_data
add_ptr 2
inc_data
add_ptr 7
inc_data
sub_ptr 5
dec_data
loop_start loop_op_577
loop_op_565:
inc_ptr
dec_data
add_ptr 3
dec_data
sub_ptr 4
dec_data
loop_end loop_op_565
loop_op_577:
loop_end loop_op_542
loop_op_578:
loop_end loop_op_522
loop_op_579:
loop_end loop_op_510
loop_op_580:
loop_end loop_op_491
loop_op_581:
loop_end loop_op_478
loop_op_582:
loop_end loop_op_470
loop_op_583:
loop_end loop_op_454
loop_op_584:
loop_end loop_op_433
loop_op_585:
loop_end loop_op_426
loop_op_586:
loop_end loop_op_411
loop_op_587:
loop_end loop_op_392
loop_op_588:
loop_end loop_op_376
loop_op_589:
loop_end loop_op_351
loop_op_590:
loop_end loop_op_331
loop_op_591:
loop_end loop_op_306
loop_op_592:
loop_end loop_op_286
loop_op_593:
loop_end loop_op_274
loop_op_594:
loop_end loop_op_249
loop_op_595:
loop_end loop_op_227
loop_op_596:
loop_end loop_op_207
loop_op_597:
inc_ptr
loop_start loop_op_627
loop_op_599:
loop_start loop_op_625
loop_op_600:
sub_ptr 11
inc_data
add_ptr 11
dec_data
loop_end loop_op_600
loop_op_625:
inc_ptr
loop_end loop_op_599
loop_op_627:
inc_data
add_ptr 7
inc_data
add_ptr 2
inc_data
dec_ptr
loop_end loop_op_152
loop_op_641:
inc_ptr
loop_end loop_op_24
loop_op_643:
sub_ptr 2
set_data 0
dec_ptr
loop_start loop_op_664
loop_op_650:
dec_data
loop_start loop_op_663
loop_op_652:
add_ptr 4
inc_data
sub_ptr 4
dec_data
loop_end loop_op_652
loop_op_663:
loop_end loop_op_650
loop_op_664:
sub_ptr 6
add_data 2
dec_ptr
add_data 3
dec_ptr
add_data 3
loop_start loop_op_683
loop_op_681:
inc_ptr
loop_end loop_op_681
loop_op_683:
dec_ptr
loop_start loop_op_855
loop_op_685:
add_ptr 5
add_data 8
loop_start loop_op_715
loop_op_699:
dec_ptr
add_data 6
dec_ptr
add_data 4
add_ptr 2
dec_data
loop_end loop_op_699
loop_op_715:
add_ptr 3
loop_start loop_op_736
loop_op_719:
dec_data
loop_start loop_op_735
loop_op_721:
dec_ptr
inc_data
sub_ptr 4
output
add_ptr 5
dec_data
loop_end loop_op_721
loop_op_735:
loop_end loop_op_719
loop_op_736:
sub_ptr 2
inc_data
sub_ptr 2
dec_data
sub_ptr 4
loop_start loop_op_827
loop_op_747:
dec_data
loop_start loop_op_758
loop_op_749:
dec_data
loop_start loop_op_756
loop_op_751:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_751
loop_op_756:
inc_ptr
loop_end loop_op_749
loop_op_758:
add_ptr 3
loop_start loop_op_767
loop_op_762:
output
loop_start loop_op_766
loop_op_764:
inc_ptr
loop_end loop_op_764
loop_op_766:
loop_end loop_op_762
loop_op_767:
sub_ptr 2
loop_start loop_op_775
loop_op_770:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_770
loop_op_775:
add_ptr 3
loop_start loop_op_793
loop_op_779:
sub_ptr 2
dec_data
loop_start loop_op_789
loop_op_783:
dec_ptr
add_data 2
inc_ptr
dec_data
loop_end loop_op_783
loop_op_789:
add_ptr 2
dec_data
loop_end loop_op_779
loop_op_793:
sub_ptr 2
loop_start loop_op_809
loop_op_796:
add_data 2
loop_start loop_op_805
loop_op_799:
dec_ptr
inc_data
inc_ptr
add_data 254
loop_end loop_op_799
loop_op_805:
inc_ptr
inc_data
dec_ptr
loop_end loop_op_796
loop_op_809:
add_ptr 3
loop_start loop_op_818
loop_op_813:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_813
loop_op_818:
sub_ptr 8
loop_end loop_op_747
loop_op_827:
add_ptr 5
add_data 10
output
inc_ptr
inc_data
loop_start loop_op_851
loop_op_846:
set_data 0
dec_ptr
loop_end loop_op_846
loop_op_851:
sub_ptr 3
loop_end loop_op_685
loop_op_855:
loop_start loop_op_870
loop_op_856:
// Enter a number using ()
dec_data
output
// /0123456789abcdef and space
input
// and hit return
output
// Daniel B Cristofani (cristofdathevanetdotcom)
// http://www
output
// hevanet
output
// com/cristofd/brainfuck/
loop_end loop_op_856
loop_op_870:

stl.loop


brainfuck_memory:
reserve dw * 30000
