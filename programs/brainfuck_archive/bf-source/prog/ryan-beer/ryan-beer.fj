// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

add_ptr 5
add_data 8
loop_start loop_op_26
loop_op_13:
dec_ptr
add_data 9
inc_ptr
dec_data
loop_end loop_op_13
loop_op_26:
dec_ptr
inc_data
loop_start loop_op_41
loop_op_29:
add_ptr 2
loop_start loop_op_34
loop_op_32:
inc_ptr
loop_end loop_op_32
loop_op_34:
inc_data
loop_start loop_op_38
loop_op_36:
dec_ptr
loop_end loop_op_36
loop_op_38:
dec_ptr
dec_data
loop_end loop_op_29
loop_op_41:
inc_ptr
add_data 10
loop_start loop_op_67
loop_op_53:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_53
loop_op_67:
dec_ptr
loop_start loop_op_82
loop_op_69:
add_ptr 2
loop_start loop_op_75
loop_op_72:
inc_data
inc_ptr
loop_end loop_op_72
loop_op_75:
dec_ptr
loop_start loop_op_79
loop_op_77:
dec_ptr
loop_end loop_op_77
loop_op_79:
dec_ptr
dec_data
loop_end loop_op_69
loop_op_82:
dec_ptr
add_data 8
loop_start loop_op_356
loop_op_92:
inc_ptr
add_data 8
loop_start loop_op_204
loop_op_102:
add_ptr 2
dec_data
inc_ptr
dec_data
inc_ptr
dec_data
add_ptr 11
dec_data
add_ptr 3
dec_data
add_ptr 6
dec_data
inc_ptr
dec_data
inc_ptr
dec_data
inc_ptr
dec_data
add_ptr 2
dec_data
add_ptr 3
dec_data
add_ptr 4
dec_data
add_ptr 5
dec_data
inc_ptr
dec_data
add_ptr 6
dec_data
add_ptr 4
dec_data
add_ptr 5
dec_data
inc_ptr
dec_data
add_ptr 5
dec_data
add_ptr 3
dec_data
add_ptr 7
dec_data
inc_ptr
dec_data
loop_start loop_op_201
loop_op_199:
dec_ptr
loop_end loop_op_199
loop_op_201:
dec_ptr
dec_data
loop_end loop_op_102
loop_op_204:
add_ptr 2
add_data 2
inc_ptr
add_data 2
inc_ptr
dec_data
add_ptr 2
inc_data
inc_ptr
add_data 2
inc_ptr
add_data 2
inc_ptr
inc_data
add_ptr 4
add_data 2
add_ptr 2
dec_data
inc_ptr
inc_data
add_ptr 2
dec_data
add_ptr 4
add_data 2
add_ptr 2
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 253
add_ptr 2
dec_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
dec_data
inc_ptr
add_data 2
add_ptr 3
dec_data
inc_ptr
add_data 2
add_ptr 2
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 253
add_ptr 2
add_data 254
add_ptr 2
inc_data
add_ptr 2
dec_data
inc_ptr
inc_data
inc_ptr
inc_data
add_ptr 2
dec_data
add_ptr 2
inc_data
inc_ptr
add_data 2
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
dec_data
inc_ptr
inc_data
add_ptr 2
add_data 2
inc_ptr
add_data 2
inc_ptr
dec_data
add_ptr 2
add_data 2
inc_ptr
dec_data
add_ptr 2
add_data 2
inc_ptr
inc_data
inc_ptr
add_data 2
inc_ptr
inc_data
add_ptr 2
inc_data
inc_ptr
add_data 253
loop_start loop_op_352
loop_op_350:
dec_ptr
loop_end loop_op_350
loop_op_352:
sub_ptr 2
dec_data
loop_end loop_op_92
loop_op_356:
add_ptr 3
add_data 4
inc_ptr
add_data 4
inc_ptr
add_data 3
inc_ptr
add_data 253
inc_ptr
add_data 2
inc_ptr
dec_data
inc_ptr
dec_data
inc_ptr
dec_data
add_ptr 2
set_data 0
inc_ptr
dec_data
inc_ptr
add_data 254
inc_ptr
set_data 0
inc_ptr
add_data 3
inc_ptr
add_data 2
inc_ptr
inc_data
inc_ptr
add_data 3
inc_ptr
add_data 253
add_ptr 3
add_data 253
inc_ptr
set_data 0
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 253
inc_ptr
set_data 0
inc_ptr
add_data 3
inc_ptr
add_data 2
inc_ptr
inc_data
inc_ptr
add_data 3
inc_ptr
dec_data
inc_ptr
add_data 3
add_ptr 2
add_data 3
inc_ptr
add_data 2
inc_ptr
add_data 252
inc_ptr
dec_data
inc_ptr
dec_data
inc_ptr
inc_data
inc_ptr
add_data 253
inc_ptr
set_data 0
inc_ptr
dec_data
inc_ptr
add_data 252
inc_ptr
add_data 254
add_ptr 2
add_data 3
inc_ptr
add_data 2
inc_ptr
inc_data
add_ptr 2
add_data 3
inc_ptr
dec_data
inc_ptr
add_data 2
inc_ptr
add_data 2
inc_ptr
inc_data
inc_ptr
dec_data
inc_ptr
add_data 3
inc_ptr
add_data 3
inc_ptr
add_data 252
inc_ptr
add_data 254
inc_ptr
add_data 254
inc_ptr
add_data 3
inc_ptr
add_data 4
inc_ptr
dec_data
inc_ptr
add_data 3
inc_ptr
add_data 252
inc_ptr
add_data 253
inc_ptr
add_data 2
add_ptr 2
inc_data
inc_ptr
dec_data
inc_ptr
dec_data
inc_ptr
add_data 253
loop_start loop_op_586
loop_op_581:
loop_start loop_op_584
loop_op_582:
dec_ptr
loop_end loop_op_582
loop_op_584:
dec_ptr
loop_end loop_op_581
loop_op_586:
add_data 9
loop_start loop_op_614
loop_op_596:
dec_ptr
inc_data
dec_ptr
add_data 11
add_ptr 2
dec_data
loop_end loop_op_596
loop_op_614:
sub_ptr 2
loop_start loop_op_880
loop_op_617:
add_ptr 5
loop_start loop_op_625
loop_op_623:
dec_ptr
loop_end loop_op_623
loop_op_625:
inc_ptr
loop_start loop_op_630
loop_op_627:
output
inc_ptr
loop_end loop_op_627
loop_op_630:
inc_ptr
add_data 254
loop_start loop_op_638
loop_op_634:
inc_ptr
output
inc_ptr
loop_end loop_op_634
loop_op_638:
dec_ptr
loop_start loop_op_643
loop_op_640:
sub_ptr 2
loop_end loop_op_640
loop_op_643:
inc_ptr
add_data 2
add_ptr 3
loop_start loop_op_653
loop_op_650:
output
inc_ptr
loop_end loop_op_650
loop_op_653:
inc_ptr
loop_start loop_op_657
loop_op_655:
inc_ptr
loop_end loop_op_655
loop_op_657:
inc_ptr
loop_start loop_op_662
loop_op_659:
output
inc_ptr
loop_end loop_op_659
loop_op_662:
dec_ptr
loop_start loop_op_669
loop_op_664:
loop_start loop_op_667
loop_op_665:
dec_ptr
loop_end loop_op_665
loop_op_667:
dec_ptr
loop_end loop_op_664
loop_op_669:
add_ptr 2
loop_start loop_op_675
loop_op_672:
output
inc_ptr
loop_end loop_op_672
loop_op_675:
inc_ptr
add_data 254
loop_start loop_op_683
loop_op_679:
inc_ptr
output
inc_ptr
loop_end loop_op_679
loop_op_683:
dec_ptr
loop_start loop_op_688
loop_op_685:
sub_ptr 2
loop_end loop_op_685
loop_op_688:
inc_ptr
add_data 2
add_ptr 3
loop_start loop_op_698
loop_op_695:
output
inc_ptr
loop_end loop_op_695
loop_op_698:
inc_ptr
loop_start loop_op_703
loop_op_700:
output
inc_ptr
loop_end loop_op_700
loop_op_703:
inc_ptr
loop_start loop_op_707
loop_op_705:
inc_ptr
loop_end loop_op_705
loop_op_707:
inc_ptr
loop_start loop_op_712
loop_op_709:
output
inc_ptr
loop_end loop_op_709
loop_op_712:
dec_ptr
loop_start loop_op_719
loop_op_714:
loop_start loop_op_717
loop_op_715:
dec_ptr
loop_end loop_op_715
loop_op_717:
dec_ptr
loop_end loop_op_714
loop_op_719:
sub_ptr 2
loop_start loop_op_724
loop_op_722:
dec_ptr
loop_end loop_op_722
loop_op_724:
add_ptr 3
inc_data
dec_ptr
loop_start loop_op_733
loop_op_730:
inc_ptr
dec_data
loop_end loop_op_730
loop_op_733:
inc_ptr
loop_start loop_op_737
loop_op_735:
inc_ptr
loop_end loop_op_735
loop_op_737:
dec_ptr
loop_start loop_op_810
loop_op_739:
add_data 9
loop_start loop_op_764
loop_op_749:
dec_ptr
inc_data
dec_ptr
dec_data
add_ptr 5
inc_data
sub_ptr 3
dec_data
loop_end loop_op_749
loop_op_764:
inc_data
sub_ptr 2
loop_start loop_op_772
loop_op_768:
add_ptr 2
dec_data
loop_end loop_op_768
loop_op_772:
add_ptr 3
loop_start loop_op_778
loop_op_776:
dec_ptr
loop_end loop_op_776
loop_op_778:
sub_ptr 3
add_data 10
add_ptr 2
loop_start loop_op_804
loop_op_794:
add_ptr 2
set_data 1
sub_ptr 2
dec_data
loop_end loop_op_794
loop_op_804:
add_ptr 2
dec_data
sub_ptr 2
loop_end loop_op_739
loop_op_810:
add_ptr 3
dec_data
loop_start loop_op_817
loop_op_815:
inc_ptr
loop_end loop_op_815
loop_op_817:
inc_ptr
dec_data
sub_ptr 2
loop_start loop_op_824
loop_op_822:
dec_ptr
loop_end loop_op_822
loop_op_824:
inc_ptr
loop_start loop_op_829
loop_op_826:
output
inc_ptr
loop_end loop_op_826
loop_op_829:
inc_ptr
add_data 254
loop_start loop_op_837
loop_op_833:
inc_ptr
output
inc_ptr
loop_end loop_op_833
loop_op_837:
dec_ptr
loop_start loop_op_842
loop_op_839:
sub_ptr 2
loop_end loop_op_839
loop_op_842:
inc_ptr
add_data 2
add_ptr 3
loop_start loop_op_852
loop_op_849:
output
inc_ptr
loop_end loop_op_849
loop_op_852:
inc_ptr
loop_start loop_op_856
loop_op_854:
inc_ptr
loop_end loop_op_854
loop_op_856:
inc_ptr
loop_start loop_op_861
loop_op_858:
output
inc_ptr
loop_end loop_op_858
loop_op_861:
dec_ptr
output
loop_start loop_op_869
loop_op_864:
loop_start loop_op_867
loop_op_865:
dec_ptr
loop_end loop_op_865
loop_op_867:
dec_ptr
loop_end loop_op_864
loop_op_869:
sub_ptr 2
loop_start loop_op_874
loop_op_872:
dec_ptr
loop_end loop_op_872
loop_op_874:
add_ptr 2
dec_data
dec_ptr
dec_data
loop_end loop_op_617
loop_op_880:

stl.loop


brainfuck_memory:
reserve dw * 30000
