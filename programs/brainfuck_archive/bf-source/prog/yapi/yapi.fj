// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

loop_start loop_op_27
loop_op_0:
// yet another pi calculation program in bf
// Just like for pi16
output
// b the accuracy of the result depends on the cellsize:
dec_data
// using  8 bit cells causes an overflow after 4 digits
dec_data
// using 16 bit cells causes an overflow after 537 digits
dec_data
// using 32 bit cells causes an overflow after several millions of digits
// It's about ~38 times shorter than pi16
output
// b
input
// ~364 times faster and works with
// not
dec_data
// wrapping (bignum) implementations
output
// by Felix Nawothnig (felix
output
// nawothnig@t
dec_data
// online
output
// de)
loop_end loop_op_0
loop_op_27:
inc_ptr
add_data 15
// (15 digits)
loop_start loop_op_74
loop_op_45:
dec_ptr
inc_data
add_ptr 8
add_data 10
sub_ptr 7
dec_data
loop_end loop_op_45
loop_op_74:
inc_ptr
add_data 5
loop_start loop_op_94
loop_op_81:
dec_ptr
add_data 9
inc_ptr
dec_data
loop_end loop_op_81
loop_op_94:
inc_data
add_ptr 6
inc_data
loop_start loop_op_135
loop_op_103:
sub_ptr 2
add_data 3
loop_start loop_op_122
loop_op_109:
add_ptr 2
loop_start loop_op_115
loop_op_112:
dec_data
dec_ptr
loop_end loop_op_112
loop_op_115:
dec_ptr
loop_start loop_op_119
loop_op_117:
inc_ptr
loop_end loop_op_117
loop_op_119:
dec_ptr
dec_data
loop_end loop_op_109
loop_op_122:
add_ptr 2
loop_start loop_op_129
loop_op_125:
inc_ptr
inc_data
inc_ptr
loop_end loop_op_125
loop_op_129:
dec_ptr
loop_start loop_op_133
loop_op_131:
dec_ptr
loop_end loop_op_131
loop_op_133:
inc_ptr
loop_end loop_op_103
loop_op_135:
inc_ptr
loop_start loop_op_158
loop_op_137:
loop_start loop_op_149
loop_op_138:
dec_data
add_ptr 4
inc_data
sub_ptr 4
loop_end loop_op_138
loop_op_149:
add_ptr 3
add_data 3
inc_ptr
dec_data
loop_end loop_op_137
loop_op_158:
dec_ptr
loop_start loop_op_165
loop_op_160:
sub_ptr 4
loop_end loop_op_160
loop_op_165:
sub_ptr 8
inc_data
loop_start loop_op_665
loop_op_175:
dec_data
add_ptr 12
loop_start loop_op_209
loop_op_189:
dec_ptr
inc_data
loop_start loop_op_203
loop_op_192:
dec_data
add_ptr 4
inc_data
sub_ptr 4
loop_end loop_op_192
loop_op_203:
add_ptr 5
loop_end loop_op_189
loop_op_209:
sub_ptr 4
loop_start loop_op_352
loop_op_214:
add_ptr 5
loop_start loop_op_231
loop_op_220:
sub_ptr 4
inc_data
add_ptr 4
dec_data
loop_end loop_op_220
loop_op_231:
sub_ptr 5
dec_data
loop_start loop_op_254
loop_op_238:
sub_ptr 2
add_data 10
add_ptr 2
dec_data
loop_end loop_op_238
loop_op_254:
add_ptr 3
loop_start loop_op_292
loop_op_258:
sub_ptr 2
loop_start loop_op_271
loop_op_261:
dec_ptr
inc_data
sub_ptr 2
inc_data
add_ptr 3
dec_data
loop_end loop_op_261
loop_op_271:
dec_ptr
loop_start loop_op_278
loop_op_273:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_273
loop_op_278:
dec_ptr
add_data 2
sub_ptr 2
inc_data
add_ptr 6
dec_data
loop_end loop_op_258
loop_op_292:
sub_ptr 2
set_data 0
sub_ptr 2
dec_data
dec_ptr
loop_start loop_op_332
loop_op_302:
dec_data
add_ptr 2
inc_data
dec_ptr
dec_data
loop_start loop_op_313
loop_op_309:
add_ptr 3
loop_end loop_op_309
loop_op_313:
inc_ptr
loop_start loop_op_326
loop_op_315:
loop_start loop_op_321
loop_op_316:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_316
loop_op_321:
inc_ptr
inc_data
add_ptr 2
loop_end loop_op_315
loop_op_326:
sub_ptr 5
loop_end loop_op_302
loop_op_332:
inc_ptr
set_data 0
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_start loop_op_350
loop_op_343:
add_ptr 2
inc_data
sub_ptr 2
dec_data
loop_end loop_op_343
loop_op_350:
dec_ptr
loop_end loop_op_214
loop_op_352:
sub_ptr 4
inc_data
add_ptr 8
set_data 0
inc_ptr
loop_start loop_op_379
loop_op_370:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_370
loop_op_379:
sub_ptr 2
add_data 10
dec_ptr
loop_start loop_op_423
loop_op_393:
dec_data
add_ptr 2
inc_data
dec_ptr
dec_data
loop_start loop_op_404
loop_op_400:
add_ptr 3
loop_end loop_op_400
loop_op_404:
inc_ptr
loop_start loop_op_417
loop_op_406:
loop_start loop_op_412
loop_op_407:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_407
loop_op_412:
inc_ptr
inc_data
add_ptr 2
loop_end loop_op_406
loop_op_417:
sub_ptr 5
loop_end loop_op_393
loop_op_423:
inc_ptr
set_data 0
inc_ptr
inc_data
inc_ptr
loop_start loop_op_441
loop_op_431:
sub_ptr 2
inc_data
dec_ptr
inc_data
add_ptr 3
dec_data
loop_end loop_op_431
loop_op_441:
sub_ptr 4
inc_data
dec_ptr
inc_data
add_ptr 2
loop_start loop_op_489
loop_op_451:
dec_data
loop_start loop_op_488
loop_op_453:
dec_data
loop_start loop_op_487
loop_op_455:
dec_data
loop_start loop_op_486
loop_op_457:
dec_data
loop_start loop_op_485
loop_op_459:
dec_data
loop_start loop_op_484
loop_op_461:
dec_data
loop_start loop_op_483
loop_op_463:
dec_data
loop_start loop_op_482
loop_op_465:
dec_data
loop_start loop_op_481
loop_op_467:
dec_data
dec_ptr
dec_data
inc_ptr
loop_start loop_op_480
loop_op_472:
dec_data
dec_ptr
inc_data
dec_ptr
dec_data
add_ptr 2
loop_end loop_op_472
loop_op_480:
loop_end loop_op_467
loop_op_481:
loop_end loop_op_465
loop_op_482:
loop_end loop_op_463
loop_op_483:
loop_end loop_op_461
loop_op_484:
loop_end loop_op_459
loop_op_485:
loop_end loop_op_457
loop_op_486:
loop_end loop_op_455
loop_op_487:
loop_end loop_op_453
loop_op_488:
loop_end loop_op_451
loop_op_489:
dec_ptr
loop_start loop_op_645
loop_op_491:
add_data 5
loop_start loop_op_523
loop_op_497:
sub_ptr 3
add_data 8
dec_ptr
add_data 8
add_ptr 4
dec_data
loop_end loop_op_497
loop_op_523:
sub_ptr 4
inc_data
dec_ptr
dec_data
add_ptr 4
loop_start loop_op_556
loop_op_535:
inc_ptr
inc_data
sub_ptr 3
add_data 9
dec_ptr
dec_data
add_ptr 3
dec_data
loop_end loop_op_535
loop_op_556:
sub_ptr 5
loop_start loop_op_569
loop_op_562:
add_ptr 2
inc_data
sub_ptr 2
dec_data
loop_end loop_op_562
loop_op_569:
inc_data
dec_ptr
loop_start loop_op_577
loop_op_572:
dec_data
inc_ptr
dec_data
dec_ptr
loop_end loop_op_572
loop_op_577:
inc_ptr
loop_start loop_op_597
loop_op_579:
add_ptr 2
output
sub_ptr 4
loop_start loop_op_593
loop_op_587:
inc_data
output
set_data 0
loop_end loop_op_587
loop_op_593:
add_ptr 2
dec_data
loop_end loop_op_579
loop_op_597:
inc_ptr
loop_start loop_op_606
loop_op_599:
add_ptr 2
output
sub_ptr 2
dec_data
loop_end loop_op_599
loop_op_606:
inc_ptr
set_data 0
inc_ptr
set_data 0
add_ptr 3
loop_start loop_op_644
loop_op_618:
add_ptr 2
loop_start loop_op_640
loop_op_621:
sub_ptr 8
inc_data
add_ptr 8
dec_data
loop_end loop_op_621
loop_op_640:
sub_ptr 2
dec_data
loop_end loop_op_618
loop_op_644:
loop_end loop_op_491
loop_op_645:
add_ptr 2
set_data 0
sub_ptr 3
set_data 0
sub_ptr 8
loop_end loop_op_175
loop_op_665:
add_data 10
output

stl.loop


brainfuck_memory:
reserve dw * 30000
