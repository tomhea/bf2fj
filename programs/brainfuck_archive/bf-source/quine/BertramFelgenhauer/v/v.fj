// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

add_ptr 3
add_data 7
inc_ptr
add_data 4
inc_ptr
add_data 4
inc_ptr
add_data 3
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 7
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 7
inc_ptr
add_data 7
inc_ptr
add_data 7
inc_ptr
add_data 7
inc_ptr
add_data 7
inc_ptr
add_data 7
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
add_data 2
inc_ptr
add_data 6
inc_ptr
add_data 4
inc_ptr
add_data 4
inc_ptr
add_data 4
inc_ptr
add_data 7
inc_ptr
add_data 5
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 7
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
add_data 4
inc_ptr
add_data 7
inc_ptr
add_data 2
inc_ptr
add_data 5
inc_ptr
add_data 3
inc_ptr
add_data 5
inc_ptr
inc_data
inc_ptr
add_data 4
inc_ptr
add_data 4
inc_ptr
add_data 6
inc_ptr
add_data 5
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 7
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
add_data 2
inc_ptr
add_data 2
inc_ptr
add_data 2
inc_ptr
add_data 2
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 4
inc_ptr
add_data 3
inc_ptr
add_data 4
inc_ptr
add_data 6
inc_ptr
add_data 5
inc_ptr
add_data 3
inc_ptr
add_data 3
inc_ptr
add_data 2
inc_ptr
add_data 5
inc_ptr
add_data 7
inc_ptr
add_data 2
inc_ptr
add_data 4
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 5
inc_ptr
add_data 6
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
inc_data
inc_ptr
add_data 4
inc_ptr
add_data 7
inc_ptr
add_data 4
inc_ptr
add_data 6
loop_start loop_op_690
loop_op_688:
dec_ptr
loop_end loop_op_688
loop_op_690:
dec_ptr
add_data 7
loop_start loop_op_712
loop_op_699:
inc_ptr
add_data 9
dec_ptr
dec_data
loop_end loop_op_699
loop_op_712:
inc_ptr
dec_data
output
output
inc_ptr
loop_start loop_op_776
loop_op_718:
dec_ptr
output
dec_ptr
add_data 5
loop_start loop_op_735
loop_op_727:
inc_ptr
add_data 252
dec_ptr
dec_data
loop_end loop_op_727
loop_op_735:
inc_ptr
inc_data
inc_ptr
loop_start loop_op_747
loop_op_739:
sub_ptr 2
inc_data
inc_ptr
output
inc_ptr
dec_data
loop_end loop_op_739
loop_op_747:
dec_ptr
loop_start loop_op_754
loop_op_749:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_749
loop_op_754:
inc_ptr
add_data 19
inc_ptr
loop_end loop_op_718
loop_op_776:
sub_ptr 3
loop_start loop_op_869
loop_op_780:
dec_data
loop_start loop_op_845
loop_op_782:
inc_ptr
add_data 2
dec_ptr
dec_data
loop_start loop_op_844
loop_op_788:
inc_ptr
inc_data
dec_ptr
dec_data
loop_start loop_op_843
loop_op_793:
inc_ptr
add_data 14
dec_ptr
dec_data
loop_start loop_op_842
loop_op_811:
inc_ptr
add_data 2
dec_ptr
dec_data
loop_start loop_op_841
loop_op_817:
inc_ptr
inc_data
dec_ptr
add_data 13
loop_start loop_op_840
loop_op_834:
inc_ptr
add_data 2
dec_ptr
dec_data
loop_end loop_op_834
loop_op_840:
loop_end loop_op_817
loop_op_841:
loop_end loop_op_811
loop_op_842:
loop_end loop_op_793
loop_op_843:
loop_end loop_op_788
loop_op_844:
loop_end loop_op_782
loop_op_845:
add_data 6
loop_start loop_op_863
loop_op_852:
inc_ptr
add_data 7
dec_ptr
dec_data
loop_end loop_op_852
loop_op_863:
inc_ptr
inc_data
output
sub_ptr 2
loop_end loop_op_780
loop_op_869:

stl.loop


brainfuck_memory:
reserve dw * 30000
