// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

loop_start loop_op_854
loop_op_0:
// (c) taken from https://en
output
// wikipedia
output
// org/wiki/Brainfuck
// This program prints "Hello World!" and a newline to the screen
input
// its
// length is 106 active command characters
output
loop_start loop_op_14
loop_op_11:
// It is not the shortest
output
loop_end loop_op_11
loop_op_14:
// This loop is an "initial comment loop"
input
// a simple way of adding a comment
// to a BF program such that you don't have to worry about any command
// characters
output
// Any "
output
// "
input
// "
input
// "
input
// "
inc_data
// "
input
// "
dec_data
// "
input
// "
dec_ptr
// " and "
inc_ptr
// " characters are simply
// ignored
input
// the "
loop_start loop_op_47
loop_op_45:
// " and "
loop_end loop_op_45
loop_op_47:
// " characters just have to be balanced
output
// This
// loop and the commands it contains are ignored because the current cell
// defaults to a value of 0; the 0 value causes this loop to be skipped
output
loop_start loop_op_61
loop_op_54:


output
input
loop_end loop_op_54
loop_op_61:
loop_start loop_op_69
loop_op_62:


output
input
loop_end loop_op_62
loop_op_69:
loop_start loop_op_77
loop_op_70:


output
input
loop_end loop_op_70
loop_op_77:
loop_start loop_op_85
loop_op_78:


output
input
loop_end loop_op_78
loop_op_85:
loop_start loop_op_93
loop_op_86:


output
input
loop_end loop_op_86
loop_op_93:
loop_start loop_op_101
loop_op_94:


output
input
loop_end loop_op_94
loop_op_101:
loop_start loop_op_109
loop_op_102:


output
input
loop_end loop_op_102
loop_op_109:
loop_start loop_op_117
loop_op_110:


output
input
loop_end loop_op_110
loop_op_117:
loop_start loop_op_125
loop_op_118:


output
input
loop_end loop_op_118
loop_op_125:
loop_start loop_op_133
loop_op_126:


output
input
loop_end loop_op_126
loop_op_133:
loop_start loop_op_141
loop_op_134:


output
input
loop_end loop_op_134
loop_op_141:
loop_start loop_op_149
loop_op_142:


output
input
loop_end loop_op_142
loop_op_149:
loop_start loop_op_157
loop_op_150:


output
input
loop_end loop_op_150
loop_op_157:
loop_start loop_op_165
loop_op_158:


output
input
loop_end loop_op_158
loop_op_165:
loop_start loop_op_173
loop_op_166:


output
input
loop_end loop_op_166
loop_op_173:
loop_start loop_op_181
loop_op_174:


output
input
loop_end loop_op_174
loop_op_181:
loop_start loop_op_189
loop_op_182:


output
input
loop_end loop_op_182
loop_op_189:
loop_start loop_op_197
loop_op_190:


output
input
loop_end loop_op_190
loop_op_197:
loop_start loop_op_205
loop_op_198:


output
input
loop_end loop_op_198
loop_op_205:
loop_start loop_op_213
loop_op_206:


output
input
loop_end loop_op_206
loop_op_213:
loop_start loop_op_221
loop_op_214:


output
input
loop_end loop_op_214
loop_op_221:
loop_start loop_op_229
loop_op_222:


output
input
loop_end loop_op_222
loop_op_229:
loop_start loop_op_237
loop_op_230:


output
input
loop_end loop_op_230
loop_op_237:
loop_start loop_op_245
loop_op_238:


output
input
loop_end loop_op_238
loop_op_245:
loop_start loop_op_253
loop_op_246:


output
input
loop_end loop_op_246
loop_op_253:
loop_start loop_op_261
loop_op_254:


output
input
loop_end loop_op_254
loop_op_261:
loop_start loop_op_269
loop_op_262:


output
input
loop_end loop_op_262
loop_op_269:
loop_start loop_op_277
loop_op_270:


output
input
loop_end loop_op_270
loop_op_277:
loop_start loop_op_285
loop_op_278:


output
input
loop_end loop_op_278
loop_op_285:
loop_start loop_op_293
loop_op_286:


output
input
loop_end loop_op_286
loop_op_293:
loop_start loop_op_301
loop_op_294:


output
input
loop_end loop_op_294
loop_op_301:
loop_start loop_op_309
loop_op_302:


output
input
loop_end loop_op_302
loop_op_309:
loop_start loop_op_317
loop_op_310:


output
input
loop_end loop_op_310
loop_op_317:
loop_start loop_op_325
loop_op_318:


output
input
loop_end loop_op_318
loop_op_325:
loop_start loop_op_333
loop_op_326:


output
input
loop_end loop_op_326
loop_op_333:
loop_start loop_op_341
loop_op_334:


output
input
loop_end loop_op_334
loop_op_341:
loop_start loop_op_349
loop_op_342:


output
input
loop_end loop_op_342
loop_op_349:
loop_start loop_op_357
loop_op_350:


output
input
loop_end loop_op_350
loop_op_357:
loop_start loop_op_365
loop_op_358:


output
input
loop_end loop_op_358
loop_op_365:
loop_start loop_op_373
loop_op_366:


output
input
loop_end loop_op_366
loop_op_373:
loop_start loop_op_381
loop_op_374:


output
input
loop_end loop_op_374
loop_op_381:
loop_start loop_op_389
loop_op_382:


output
input
loop_end loop_op_382
loop_op_389:
loop_start loop_op_397
loop_op_390:


output
input
loop_end loop_op_390
loop_op_397:
loop_start loop_op_405
loop_op_398:


output
input
loop_end loop_op_398
loop_op_405:
loop_start loop_op_413
loop_op_406:


output
input
loop_end loop_op_406
loop_op_413:
loop_start loop_op_421
loop_op_414:


output
input
loop_end loop_op_414
loop_op_421:
loop_start loop_op_429
loop_op_422:


output
input
loop_end loop_op_422
loop_op_429:
loop_start loop_op_437
loop_op_430:


output
input
loop_end loop_op_430
loop_op_437:
loop_start loop_op_445
loop_op_438:


output
input
loop_end loop_op_438
loop_op_445:
loop_start loop_op_453
loop_op_446:


output
input
loop_end loop_op_446
loop_op_453:
loop_start loop_op_461
loop_op_454:


output
input
loop_end loop_op_454
loop_op_461:
loop_start loop_op_469
loop_op_462:


output
input
loop_end loop_op_462
loop_op_469:
loop_start loop_op_477
loop_op_470:


output
input
loop_end loop_op_470
loop_op_477:
loop_start loop_op_485
loop_op_478:


output
input
loop_end loop_op_478
loop_op_485:
loop_start loop_op_493
loop_op_486:


output
input
loop_end loop_op_486
loop_op_493:
loop_start loop_op_501
loop_op_494:


output
input
loop_end loop_op_494
loop_op_501:
loop_start loop_op_509
loop_op_502:


output
input
loop_end loop_op_502
loop_op_509:
loop_start loop_op_517
loop_op_510:


output
input
loop_end loop_op_510
loop_op_517:
loop_start loop_op_525
loop_op_518:


output
input
loop_end loop_op_518
loop_op_525:
loop_start loop_op_533
loop_op_526:


output
input
loop_end loop_op_526
loop_op_533:
loop_start loop_op_541
loop_op_534:


output
input
loop_end loop_op_534
loop_op_541:
loop_start loop_op_549
loop_op_542:


output
input
loop_end loop_op_542
loop_op_549:
loop_start loop_op_557
loop_op_550:


output
input
loop_end loop_op_550
loop_op_557:
loop_start loop_op_565
loop_op_558:


output
input
loop_end loop_op_558
loop_op_565:
loop_start loop_op_573
loop_op_566:


output
input
loop_end loop_op_566
loop_op_573:
loop_start loop_op_581
loop_op_574:


output
input
loop_end loop_op_574
loop_op_581:
loop_start loop_op_589
loop_op_582:


output
input
loop_end loop_op_582
loop_op_589:
loop_start loop_op_597
loop_op_590:


output
input
loop_end loop_op_590
loop_op_597:
loop_start loop_op_605
loop_op_598:


output
input
loop_end loop_op_598
loop_op_605:
loop_start loop_op_613
loop_op_606:


output
input
loop_end loop_op_606
loop_op_613:
loop_start loop_op_621
loop_op_614:


output
input
loop_end loop_op_614
loop_op_621:
loop_start loop_op_629
loop_op_622:


output
input
loop_end loop_op_622
loop_op_629:
loop_start loop_op_637
loop_op_630:


output
input
loop_end loop_op_630
loop_op_637:
loop_start loop_op_645
loop_op_638:


output
input
loop_end loop_op_638
loop_op_645:
loop_start loop_op_653
loop_op_646:


output
input
loop_end loop_op_646
loop_op_653:
loop_start loop_op_661
loop_op_654:


output
input
loop_end loop_op_654
loop_op_661:
loop_start loop_op_669
loop_op_662:


output
input
loop_end loop_op_662
loop_op_669:
loop_start loop_op_677
loop_op_670:


output
input
loop_end loop_op_670
loop_op_677:
loop_start loop_op_685
loop_op_678:


output
input
loop_end loop_op_678
loop_op_685:
loop_start loop_op_693
loop_op_686:


output
input
loop_end loop_op_686
loop_op_693:
loop_start loop_op_701
loop_op_694:


output
input
loop_end loop_op_694
loop_op_701:
loop_start loop_op_709
loop_op_702:


output
input
loop_end loop_op_702
loop_op_709:
loop_start loop_op_717
loop_op_710:


output
input
loop_end loop_op_710
loop_op_717:
loop_start loop_op_725
loop_op_718:


output
input
loop_end loop_op_718
loop_op_725:
loop_start loop_op_733
loop_op_726:


output
input
loop_end loop_op_726
loop_op_733:
loop_start loop_op_741
loop_op_734:


output
input
loop_end loop_op_734
loop_op_741:
loop_start loop_op_749
loop_op_742:


output
input
loop_end loop_op_742
loop_op_749:
loop_start loop_op_757
loop_op_750:


output
input
loop_end loop_op_750
loop_op_757:
loop_start loop_op_765
loop_op_758:


output
input
loop_end loop_op_758
loop_op_765:
loop_start loop_op_773
loop_op_766:


output
input
loop_end loop_op_766
loop_op_773:
loop_start loop_op_781
loop_op_774:


output
input
loop_end loop_op_774
loop_op_781:
loop_start loop_op_789
loop_op_782:


output
input
loop_end loop_op_782
loop_op_789:
loop_start loop_op_797
loop_op_790:


output
input
loop_end loop_op_790
loop_op_797:
loop_start loop_op_805
loop_op_798:


output
input
loop_end loop_op_798
loop_op_805:
loop_start loop_op_813
loop_op_806:


output
input
loop_end loop_op_806
loop_op_813:
loop_start loop_op_821
loop_op_814:


output
input
loop_end loop_op_814
loop_op_821:
loop_start loop_op_829
loop_op_822:


output
input
loop_end loop_op_822
loop_op_829:
loop_start loop_op_837
loop_op_830:


output
input
loop_end loop_op_830
loop_op_837:
loop_start loop_op_845
loop_op_838:


output
input
loop_end loop_op_838
loop_op_845:
loop_start loop_op_853
loop_op_846:


output
input
loop_end loop_op_846
loop_op_853:
loop_end loop_op_0
loop_op_854:
add_data 8
// Set Cell #0 to 8
loop_start loop_op_919
loop_op_864:
inc_ptr
add_data 4
// Add 4 to Cell #1; this will always set Cell #1 to 4
loop_start loop_op_896
loop_op_871:
// as the cell will be cleared by the loop
inc_ptr
add_data 2
// Add 2 to Cell #2
inc_ptr
add_data 3
// Add 3 to Cell #3
inc_ptr
add_data 3
// Add 3 to Cell #4
inc_ptr
inc_data
// Add 1 to Cell #5
sub_ptr 4
dec_data
// Decrement the loop counter in Cell #1
loop_end loop_op_871
loop_op_896:
// Loop until Cell #1 is zero; number of iterations is 4
inc_ptr
inc_data
// Add 1 to Cell #2
inc_ptr
inc_data
// Add 1 to Cell #3
inc_ptr
dec_data
// Subtract 1 from Cell #4
add_ptr 2
inc_data
// Add 1 to Cell #6
loop_start loop_op_913
loop_op_911:
dec_ptr
loop_end loop_op_911
loop_op_913:
// Move back to the first zero cell you find; this will
// be Cell #1 which was cleared by the previous loop
dec_ptr
dec_data
// Decrement the loop Counter in Cell #0
loop_end loop_op_864
loop_op_919:
// Loop until Cell #0 is zero; number of iterations is 8
// The result of this is:
// Cell no :   0   1   2   3   4   5   6
// Contents:   0   0  72 104  88  32   8
// Pointer :   ^
add_ptr 2
output
// Cell #2 has value 72 which is 'H'
inc_ptr
add_data 253
output
// Subtract 3 from Cell #3 to get 101 which is 'e'
add_data 7
output
output
add_data 3
output
// Likewise for 'llo' from Cell #3
add_ptr 2
output
// Cell #5 is 32 for the space
dec_ptr
dec_data
output
// Subtract 1 from Cell #4 for 87 to give a 'W'
dec_ptr
output
// Cell #3 was set to 'o' from the end of 'Hello'
add_data 3
output
add_data 250
output
add_data 248
output
// Cell #3 for 'rl' and 'd'
add_ptr 2
inc_data
output
// Add 1 to Cell #5 gives us an exclamation point
inc_ptr
add_data 2
output
// And finally a newline from Cell #6

stl.loop


brainfuck_memory:
reserve dw * 30000
