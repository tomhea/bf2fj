// The next code was created as part of the bf2fj (Brainfuck to Flipjump) project: https://github.com/tomhea/bf2fj


HEXES_IN_BYTE = 2
BITS_IN_HEX = 4
DEFAULT_LABEL_PADDINGS = 16
// NOTE: standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup_and_init_pointers brainfuck_start


ptr: hex.vec w/BITS_IN_HEX, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit           // used for the brainfuck ops fast-calls.
inner_ret_register: bit.bit     // used for the read/write *ptr fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

def call_inner label < inner_ret_register {
    stl.fcall label, inner_ret_register
}
// Complexity: 1
def return_inner < inner_ret_register {
    stl.fret inner_ret_register
}

temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

repetition_optimization_byte: hex.vec HEXES_IN_BYTE     // can be changed, as it's an input to data-optimization macros.

PTR_OPTIMIZE_OFFSET_HEX_LENGTH = 3
PTR_OPTIMIZE_OFFSET_HEX_SHIFT = 1
// can be changed, as it's an input to ptr-optimization macros.
repetition_optimization_ptr_offset: hex.vec PTR_OPTIMIZE_OFFSET_HEX_LENGTH

//  Time Complexity: w(0.75@+ 5) + 9@+13   ( ~870 ops, according to the standard values)
// Space Complexity: w(0.75@+29) + 9@+72   (~1700 ops, according to the standard values)
//    temp_byte = stl.pointers.read_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, temp_byte {
    hex.read_byte temp_byte, ptr
}
pad DEFAULT_LABEL_PADDINGS
read_pointed_byte_to_temp_byte:
    read_pointed_byte_to_temp_byte
    return_inner

//  Time Complexity: 12@      (~250 ops, according to the standard values)
// Space Complexity: 12@+176  (~430 ops, according to the standard values)
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte < hex.pointers.read_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, hex.pointers.read_byte, temp_byte
    hex.pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
}
pad DEFAULT_LABEL_PADDINGS
write_temp_byte_to_pointed_byte:
    write_temp_byte_to_pointed_byte
    return_inner


// Required init macros. Space Complexity: 3,142 (according to the standard values).
hex.tables.init_shared
hex.add.init
hex.sub.init




// ---------- Pointer Macros ----------

// Time Complexity: 10@+14  (224 ops, according to the standard valuess)
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
pad DEFAULT_LABEL_PADDINGS
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_inc ptr
    return


// Time Complexity: 10@+23  (=233 according to the standard values)
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
pad DEFAULT_LABEL_PADDINGS
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_dec ptr
    return




// ---------- Data Macros ----------

// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
pad DEFAULT_LABEL_PADDINGS
inc_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 26@+1  (~1210 according to the standard values)
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
pad DEFAULT_LABEL_PADDINGS
dec_data:   // space-complexity is about: 131 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- IO Macros ----------

//  Time Complexity: w(0.75@+ 5) + 13@+5   (~940 ops, according to the standard values)
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
pad DEFAULT_LABEL_PADDINGS
output:     // space-complexity is about: 63 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(0.75@+ 5) + 28@+15  (~1270 according to the standard values)
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
pad DEFAULT_LABEL_PADDINGS
input:      // space-complexity is about: 161 (according to the standard values).
    call_inner read_pointed_byte_to_temp_byte
    hex.input temp_byte
    call_inner write_temp_byte_to_pointed_byte
    return




// ---------- Looping Macros ----------

// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
// Time Complexity: w(0.75@+ 5) + 12@+7  (~920 according to the standard values)
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_pointed_byte_to_temp_byte, temp_byte {
    call_inner read_pointed_byte_to_temp_byte
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}



// ---------- Pointer Optimization Macros ----------

// Time Complexity: w(0.75@+ 5) + 44@+50  (~1640 according to the standard values)
//   Executes multiple '>','<' commands:  ptr += value  (value must be 0 <= value < 256)
def add_ptr value < repetition_optimization_ptr_offset, add_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call add_ptr
}
pad DEFAULT_LABEL_PADDINGS
add_ptr:    // space-complexity is about: 699
    hex.add_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return


// Time Complexity: w(0.75@+ 5) + 44@+59  (~1650 according to the standard values)
//   Executes multiple '<','>' commands:  ptr -= value  (value must be 0 <= value < 256)
def sub_ptr value < repetition_optimization_ptr_offset, sub_ptr {
    hex.set \
        PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        repetition_optimization_ptr_offset, \
        (value * dw) >> (BITS_IN_HEX * PTR_OPTIMIZE_OFFSET_HEX_SHIFT)
    call sub_ptr
}
pad DEFAULT_LABEL_PADDINGS
sub_ptr:    // space-complexity is about: 711
    hex.sub_shifted \
        w/BITS_IN_HEX,  PTR_OPTIMIZE_OFFSET_HEX_LENGTH, \
        ptr,            repetition_optimization_ptr_offset, \
        PTR_OPTIMIZE_OFFSET_HEX_SHIFT
    return




// ---------- Data Optimization Macros ----------


// Time Complexity: w(0.75@+ 5) + 34@+33  (~1410 according to the standard values)
//   Executes multiple '+'/'-' commands:  (*ptr) += value  (value is positive, yet can overflow)
def add_data value < repetition_optimization_byte, add_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call add_data
}
pad DEFAULT_LABEL_PADDINGS
add_data:   // space-complexity is about: 313
    call_inner read_pointed_byte_to_temp_byte
    hex.add HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(0.75@+ 5) + 30@+9  (~1300 according to the standard values)
//   Executes "[-]"/"[+]" and then multiple '+'/'-' commands:  (*ptr) = value  (value is positive, yet can overflow)
def set_data value < repetition_optimization_byte, set_data {
    hex.set HEXES_IN_BYTE, repetition_optimization_byte, value
    call set_data
}
pad DEFAULT_LABEL_PADDINGS
set_data:   // space-complexity is about: 173
    call_inner read_pointed_byte_to_temp_byte
    hex.mov HEXES_IN_BYTE, temp_byte, repetition_optimization_byte
    call_inner write_temp_byte_to_pointed_byte
    return




brainfuck_start:

// The next code was optimized by bf2fj:

// ===================================================================
// ======================== OUTPUT STRING ============================
// ===================================================================
inc_ptr
add_data 8
loop_start loop_op_24
loop_op_12:
dec_ptr
add_data 8
inc_ptr
dec_data
loop_end loop_op_12
loop_op_24:
dec_ptr
add_data 16
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_71
loop_op_57:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_57
loop_op_71:
dec_ptr
add_data 14
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_116
loop_op_102:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_102
loop_op_116:
dec_ptr
add_data 5
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_152
loop_op_138:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_138
loop_op_152:
dec_ptr
add_data 9
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_192
loop_op_178:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_178
loop_op_192:
dec_ptr
inc_data
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_224
loop_op_210:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_210
loop_op_224:
dec_ptr
add_data 15
output
set_data 0
inc_ptr
add_data 5
loop_start loop_op_260
loop_op_251:
dec_ptr
add_data 5
inc_ptr
dec_data
loop_end loop_op_251
loop_op_260:
dec_ptr
add_data 7
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_298
loop_op_284:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_284
loop_op_298:
dec_ptr
add_data 17
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_346
loop_op_332:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_332
loop_op_346:
dec_ptr
add_data 12
output
set_data 0
inc_ptr
add_data 5
loop_start loop_op_379
loop_op_370:
dec_ptr
add_data 5
inc_ptr
dec_data
loop_end loop_op_370
loop_op_379:
dec_ptr
add_data 7
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_417
loop_op_403:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_403
loop_op_417:
dec_ptr
add_data 16
output
set_data 0
inc_ptr
add_data 10
loop_start loop_op_464
loop_op_450:
dec_ptr
add_data 10
inc_ptr
dec_data
loop_end loop_op_450
loop_op_464:
dec_ptr
add_data 11
output
set_data 0
inc_ptr
add_data 7
loop_start loop_op_500
loop_op_489:
dec_ptr
add_data 7
inc_ptr
dec_data
loop_end loop_op_489
loop_op_500:
dec_ptr
add_data 9
output
set_data 0
inc_ptr
add_data 5
loop_start loop_op_530
loop_op_521:
dec_ptr
add_data 5
inc_ptr
dec_data
loop_end loop_op_521
loop_op_530:
dec_ptr
add_data 7
output
set_data 0
// ===================================================================
// ======================== INPUT NUMBER  ============================
// ===================================================================
inc_data
// cont=1
loop_start loop_op_698
loop_op_548:
dec_data
// cont=0
inc_ptr
input
// ======SUB10======
add_data 246
loop_start loop_op_696
loop_op_564:
// not 10
dec_ptr
inc_data
inc_ptr
// cont=1
// =====SUB38======
add_data 218
inc_ptr
// =====MUL10=======
loop_start loop_op_619
loop_op_611:
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_end loop_op_611
loop_op_619:
add_ptr 2
loop_start loop_op_629
loop_op_622:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_622
loop_op_629:
dec_ptr
// dup
add_ptr 3
add_data 9
loop_start loop_op_680
loop_op_644:
sub_ptr 3
loop_start loop_op_656
loop_op_648:
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_end loop_op_648
loop_op_656:
add_ptr 2
loop_start loop_op_666
loop_op_659:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_659
loop_op_666:
dec_ptr
// dup
loop_start loop_op_676
loop_op_669:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_669
loop_op_676:
add_ptr 2
dec_data
loop_end loop_op_644
loop_op_680:
sub_ptr 3
set_data 0
dec_ptr
// ======RMOVE1======
dec_ptr
loop_start loop_op_695
loop_op_690:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_690
loop_op_695:
loop_end loop_op_564
loop_op_696:
dec_ptr
loop_end loop_op_548
loop_op_698:
add_ptr 2
loop_start loop_op_708
loop_op_701:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_701
loop_op_708:
sub_ptr 2
// ===================================================================
// ======================= PROCESS NUMBER  ===========================
// ===================================================================
// ==== ==== ==== ====
// numd numu teid teiu
// ==== ==== ==== ====
inc_ptr
inc_data
dec_ptr
dec_data
loop_start loop_op_1419
loop_op_721:
inc_ptr
inc_data
// ======DUP======
loop_start loop_op_733
loop_op_725:
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_end loop_op_725
loop_op_733:
add_ptr 2
loop_start loop_op_743
loop_op_736:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_736
loop_op_743:

inc_data
dec_ptr
add_data 254
add_ptr 8
inc_data
sub_ptr 8
// isprime=1
loop_start loop_op_1006
loop_op_768:
inc_ptr
inc_data
dec_ptr
dec_data
// =====DUP3=====
dec_ptr
loop_start loop_op_787
loop_op_775:
add_ptr 3
inc_data
inc_ptr
inc_data
sub_ptr 4
dec_data
loop_end loop_op_775
loop_op_787:
add_ptr 4
loop_start loop_op_803
loop_op_792:
sub_ptr 4
inc_data
add_ptr 4
dec_data
loop_end loop_op_792
loop_op_803:
sub_ptr 3
// =====DUP2=====
inc_ptr
loop_start loop_op_819
loop_op_809:
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_end loop_op_809
loop_op_819:
add_ptr 3
loop_start loop_op_832
loop_op_823:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_823
loop_op_832:
dec_ptr
// ====DIVIDES=======
loop_start loop_op_849
loop_op_841:
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_end loop_op_841
loop_op_849:
add_ptr 2
loop_start loop_op_859
loop_op_852:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_852
loop_op_859:
dec_ptr
// DUP i=div
sub_ptr 2
loop_start loop_op_950
loop_op_864:
add_ptr 5
inc_data
// bool=1
sub_ptr 3
loop_start loop_op_883
loop_op_875:
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_end loop_op_875
loop_op_883:
add_ptr 2
loop_start loop_op_893
loop_op_886:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_886
loop_op_893:
dec_ptr
// DUP
loop_start loop_op_905
loop_op_896:
add_ptr 2
set_data 0
sub_ptr 2
dec_data
loop_end loop_op_896
loop_op_905:
// IF i THEN bool=0
add_ptr 2
loop_start loop_op_941
loop_op_909:
// IF i=0
sub_ptr 4
loop_start loop_op_923
loop_op_915:
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_end loop_op_915
loop_op_923:
add_ptr 2
loop_start loop_op_933
loop_op_926:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_926
loop_op_933:
dec_ptr
// i=div
add_ptr 3
dec_data
// bool=0
loop_end loop_op_909
loop_op_941:
sub_ptr 3
dec_data
// DEC i
sub_ptr 2
dec_data
loop_end loop_op_864
loop_op_950:
inc_data
add_ptr 2
loop_start loop_op_963
loop_op_954:
sub_ptr 2
set_data 0
add_ptr 2
dec_data
loop_end loop_op_954
loop_op_963:
dec_ptr
set_data 0
dec_ptr
// CLR div
// =====END DIVIDES====
loop_start loop_op_990
loop_op_973:
add_ptr 6
set_data 0
sub_ptr 6
dec_data
loop_end loop_op_973
loop_op_990:
// if divides then isprime=0

set_data 0
inc_ptr
set_data 0
sub_ptr 3
loop_end loop_op_768
loop_op_1006:
add_ptr 8
loop_start loop_op_1399
loop_op_1015:
dec_data
sub_ptr 7
set_data 0
sub_ptr 2
loop_start loop_op_1039
loop_op_1029:
add_ptr 2
inc_data
inc_ptr
inc_data
sub_ptr 3
dec_data
loop_end loop_op_1029
loop_op_1039:
add_ptr 3
loop_start loop_op_1052
loop_op_1043:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_1043
loop_op_1052:
dec_ptr
// ===================================================================
// ======================== OUTPUT NUMBER  ===========================
// ===================================================================
loop_start loop_op_1066
loop_op_1061:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_1061
loop_op_1066:
inc_ptr
loop_start loop_op_1312
loop_op_1068:
// ======DUP======
loop_start loop_op_1078
loop_op_1070:
inc_ptr
inc_data
inc_ptr
inc_data
sub_ptr 2
dec_data
loop_end loop_op_1070
loop_op_1078:
add_ptr 2
loop_start loop_op_1088
loop_op_1081:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_1081
loop_op_1088:
dec_ptr
// ======MOD10====
inc_ptr
add_data 9
dec_ptr
loop_start loop_op_1156
loop_op_1102:
add_ptr 3
inc_data
sub_ptr 2
// bool= 1
loop_start loop_op_1120
loop_op_1110:
inc_ptr
inc_data
inc_ptr
set_data 0
sub_ptr 2
dec_data
loop_end loop_op_1110
loop_op_1120:
// bool= ten==0
inc_ptr
loop_start loop_op_1128
loop_op_1123:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_1123
loop_op_1128:
// ten = tmp
inc_ptr
loop_start loop_op_1147
loop_op_1131:
sub_ptr 2
add_data 10
add_ptr 2
dec_data
loop_end loop_op_1131
loop_op_1147:
// if ten=0 ten=10
sub_ptr 2
dec_data
// dec ten
dec_ptr
dec_data
// dec num
loop_end loop_op_1102
loop_op_1156:
add_data 9
// num=9
inc_ptr
loop_start loop_op_1173
loop_op_1168:
dec_ptr
dec_data
inc_ptr
dec_data
loop_end loop_op_1168
loop_op_1173:
dec_ptr
// dec num by ten
// =======RROT======
loop_start loop_op_1182
loop_op_1177:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_1177
loop_op_1182:
dec_ptr
loop_start loop_op_1189
loop_op_1184:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_1184
loop_op_1189:
dec_ptr
loop_start loop_op_1196
loop_op_1191:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_1191
loop_op_1196:
add_ptr 3
loop_start loop_op_1209
loop_op_1200:
sub_ptr 3
inc_data
add_ptr 3
dec_data
loop_end loop_op_1200
loop_op_1209:
dec_ptr
// =======DIV10========
inc_ptr
add_data 9
dec_ptr
loop_start loop_op_1280
loop_op_1223:
add_ptr 3
inc_data
sub_ptr 2
// bool= 1
loop_start loop_op_1241
loop_op_1231:
inc_ptr
inc_data
inc_ptr
set_data 0
sub_ptr 2
dec_data
loop_end loop_op_1231
loop_op_1241:
// bool= ten==0
inc_ptr
loop_start loop_op_1249
loop_op_1244:
dec_ptr
inc_data
inc_ptr
dec_data
loop_end loop_op_1244
loop_op_1249:
// ten = tmp
inc_ptr
loop_start loop_op_1271
loop_op_1252:
sub_ptr 2
add_data 10
add_ptr 3
inc_data
dec_ptr
dec_data
loop_end loop_op_1252
loop_op_1271:
// if ten=0 ten=10  inc div
sub_ptr 2
dec_data
// dec ten
dec_ptr
dec_data
// dec num
loop_end loop_op_1223
loop_op_1280:
add_ptr 4
loop_start loop_op_1296
loop_op_1285:
sub_ptr 4
inc_data
add_ptr 4
dec_data
loop_end loop_op_1285
loop_op_1296:
sub_ptr 4
// copy div to num
inc_ptr
set_data 0
dec_ptr
// clear ten
// =======INC1=========
dec_ptr
inc_data
inc_ptr
loop_end loop_op_1068
loop_op_1312:
dec_ptr
loop_start loop_op_1365
loop_op_1314:
// =======MOVER=========
loop_start loop_op_1321
loop_op_1316:
inc_ptr
inc_data
dec_ptr
dec_data
loop_end loop_op_1316
loop_op_1321:
// =======ADD48========
add_data 7
loop_start loop_op_1341
loop_op_1330:
dec_ptr
add_data 7
inc_ptr
dec_data
loop_end loop_op_1330
loop_op_1341:
dec_ptr
dec_data
inc_ptr
// =======PUTC=======
dec_ptr
output
set_data 0
inc_ptr
// ======MOVEL2========
inc_ptr
loop_start loop_op_1361
loop_op_1354:
sub_ptr 2
inc_data
add_ptr 2
dec_data
loop_end loop_op_1354
loop_op_1361:
sub_ptr 2
dec_data
loop_end loop_op_1314
loop_op_1365:
inc_ptr
add_data 4
loop_start loop_op_1383
loop_op_1371:
dec_ptr
add_data 8
inc_ptr
dec_data
loop_end loop_op_1371
loop_op_1383:
dec_ptr
output
set_data 0
// ===================================================================
// =========================== END FOR ===============================
// ===================================================================
add_ptr 7
loop_end loop_op_1015
loop_op_1399:
sub_ptr 7
set_data 0
dec_ptr
set_data 0
sub_ptr 2
dec_data
loop_end loop_op_721
loop_op_1419:
// ======LF========
add_data 10
output
set_data 0

stl.loop


brainfuck_memory:
reserve dw * 30000
