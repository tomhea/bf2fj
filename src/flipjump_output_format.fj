HEXES_IN_BYTE = 2

stl.startup
;brainfuck_start

ptr: hex.vec w/4, brainfuck_memory  // this is the main pointer that brainfuck operates on.

ret_register: bit.bit   // used for the fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

_original_byte: hex.vec HEXES_IN_BYTE
temp_byte: hex.vec HEXES_IN_BYTE

// Time Complexity: 11w@ + 24@ + 28
//   temp_byte = _original_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, _original_byte, temp_byte {
    hex.zero HEXES_IN_BYTE, _original_byte

    hex.xor_from_ptr _original_byte, ptr       // read 4-lsb
    hex.ptr_inc ptr

    hex.xor_from_ptr _original_byte + dw, ptr  // read 4-msb
    hex.ptr_dec ptr

    hex.mov HEXES_IN_BYTE, temp_byte, _original_byte
}

// Time Complexity: w(0.5@+2) + 9@+12   (if msh changed: w(@+4) + 16@+24).
//   *ptr[:2] ^= temp_byte ^ _original_byte
def write_temp_byte_to_pointed_byte @ xor_2nd_hex, end < ptr, _original_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, temp_byte, _original_byte

    hex.xor_to_ptr ptr, temp_byte

  xor_2nd_hex:
    hex.if0 HEXES_IN_BYTE, temp_byte + dw, end
    hex.ptr_inc ptr
    hex.xor_to_ptr ptr, temp_byte + dw
    hex.ptr_dec ptr

  end:
}


// inits:
stl.ptr_init
hex.tables.init_shared
hex.add.init
hex.sub.init


// TODO add time complexities to all the 8 op-macros.

def inc_ptr < inc_ptr {
    call inc_ptr
}
inc_ptr:    // '>'  ptr++
    hex.ptr_add ptr, HEXES_IN_BYTE
    return


def dec_ptr < dec_ptr {
    call dec_ptr
}
dec_ptr:    // '<'  ptr--
    hex.ptr_sub ptr, HEXES_IN_BYTE
    return


def inc_data < inc_data {
    call inc_data
}
inc_data:   // '+'  (*ptr)++
    read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    write_temp_byte_to_pointed_byte
    return


def dec_data < dec_data {
    call dec_data
}
dec_data:   // '-'  (*ptr)--
    read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    write_temp_byte_to_pointed_byte
    return


def output < output {
    call output
}
output:     // '.'  print_byte(*ptr)
    read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


def input < input {
    call input
}
input:      // ','  *ptr = input_byte()
    read_pointed_byte_to_temp_byte
    hex.input temp_byte
    write_temp_byte_to_pointed_byte
    return


def loop_start after_loop_end_label < loop_start, temp_byte {
    call loop_start
    hex.if0 HEXES_IN_BYTE, temp_byte, after_loop_end_label
}
loop_start: // '['  if (*ptr == 0) goto loop-end
    read_pointed_byte_to_temp_byte
    return


def loop_end after_loop_start_label < loop_end, temp_byte {
    call loop_end
    hex.if1 HEXES_IN_BYTE, temp_byte, after_loop_start_label
}
loop_end:   // ']'  if (*ptr != 0) goto loop-start
    read_pointed_byte_to_temp_byte
    return






brainfuck_start:

!!!HERE_THE_COMPILED_BRAINFUCK_OPS_WILL_BE!!!

stl.loop


brainfuck_memory:
reserve dw * !!!NUMBER_OF_BRAINFUCK_DATA_CELLS!!!
