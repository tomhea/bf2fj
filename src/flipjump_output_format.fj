HEXES_IN_BYTE = 2
// standard values, for a program of size 10,000 random bf-ops: w=32, @=21.

stl.startup
;brainfuck_start

ptr: hex.vec w/4, brainfuck_memory  // this is the main data-pointer that brainfuck operates on.

ret_register: bit.bit   // used for the fast-calls.
// Complexity: @-1
def call label < ret_register {
    stl.fcall label, ret_register
}
// Complexity: 1
def return < ret_register {
    stl.fret ret_register
}

_original_byte: hex.vec HEXES_IN_BYTE   // mustn't be touched.
temp_byte: hex.vec HEXES_IN_BYTE        // can be changed between read_pointed_byte..() to write_temp_byte(..) calls.

//  Time Complexity: 11w@ + 24@+28
// Space Complexity about: 12.5w@, which is ~8,400 ops (according to the standard values).
//    temp_byte = _original_byte = *ptr[:2]
def read_pointed_byte_to_temp_byte < ptr, _original_byte, temp_byte {
    hex.zero HEXES_IN_BYTE, _original_byte

    hex.xor_from_ptr _original_byte, ptr       // read 4-lsb
    hex.ptr_inc ptr

    hex.xor_from_ptr _original_byte + dw, ptr  // read 4-msb
    hex.ptr_dec ptr

    hex.mov HEXES_IN_BYTE, temp_byte, _original_byte
}

//  Time Complexity: 6.6w@ + 4@+6 (on average, based on that if1 will be false on 1/5 of the times).
// Space Complexity about: 12.5w@, which is ~8,400 ops (according to the standard values).
//    temp_byte[:1] := 0, only if (*ptr[:2] == 0). otherwise temp_byte[:1] := non-zero.
def read_is_pointed_byte_zero_to_temp_byte_lsw @ end < ptr, temp_byte {
    hex.zero temp_byte

    hex.xor_from_ptr temp_byte, ptr     // read 4-lsb
    hex.if1 temp_byte, end

    hex.ptr_inc ptr
    hex.xor_from_ptr temp_byte, ptr     // read 4-msb
    hex.ptr_dec ptr

  end:
}

//  Time Complexity: w(0.5@+2) + 9@+12   (if msh changed: w(@+4) + 16@+24).
// Space Complexity about: w(2@+31) + 20@+262, which is ~3,000 ops (according to the standard values).
//    *ptr[:2] ^= (temp_byte ^ _original_byte)
def write_temp_byte_to_pointed_byte @ xor_2nd_hex, end < ptr, _original_byte, temp_byte {
    hex.xor HEXES_IN_BYTE, temp_byte, _original_byte

    hex.xor_to_ptr ptr, temp_byte

    hex.if0 temp_byte + dw, end
  xor_2nd_hex:
    hex.ptr_inc ptr
    hex.xor_to_ptr ptr, temp_byte + dw
    hex.ptr_dec ptr

  end:
}


// Required init macros. Space Complexity: 3,160 (according to the standard values).
hex.pointers.ptr_init
hex.tables.init_shared
hex.add.init
hex.sub.init




// TODO make the 3 *ptr macros used just once, by fcall/fret them.

// Time Complexity: 10@+14
//   Executes the '>' command:  ptr++
def inc_ptr < inc_ptr {
    call inc_ptr
}
inc_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_add ptr, HEXES_IN_BYTE  // complexity note: hex.add_constant:n_const is 1
    return


// Time Complexity: 10@+23
//   Executes the '<' command:  ptr--
def dec_ptr < dec_ptr {
    call dec_ptr
}
dec_ptr:    // space-complexity is about: 600 (according to the standard values).
    hex.ptr_sub ptr, HEXES_IN_BYTE  // complexity note: hex.sub_constant:n_const is 1
    return


// Time Complexity: w(11.5@+2) + 36@+41
//   Executes the '+' command:  (*ptr)++
def inc_data < inc_data {
    call inc_data
}
inc_data:   // space-complexity is about: 11,500 (according to the standard values).
    read_pointed_byte_to_temp_byte
    hex.inc HEXES_IN_BYTE, temp_byte
    write_temp_byte_to_pointed_byte
    return


// Time Complexity: w(11.5@+2) + 36@+41
//   Executes the '-' command:  (*ptr)--
def dec_data < dec_data {
    call dec_data
}
dec_data:   // space-complexity is about: 11,500 (according to the standard values).
    read_pointed_byte_to_temp_byte
    hex.dec HEXES_IN_BYTE, temp_byte
    write_temp_byte_to_pointed_byte
    return


// Time Complexity: 11w@ + 26@+28
//   Executes the '.' command:  print_byte(*ptr)
def output < output {
    call output
}
output:     // space-complexity is about: 8,500 (according to the standard values).
    read_pointed_byte_to_temp_byte
    hex.print temp_byte
    return


// Time Complexity: w(12@+4) + 44@+66
//   Executes the ',' command:  *ptr = input_byte()
def input < input {
    call input
}
input:      // space-complexity is about: 11,500 (according to the standard values).
    read_pointed_byte_to_temp_byte
    hex.input temp_byte
    write_temp_byte_to_pointed_byte
    return


// Time Complexity: 6.6w@ + 6@+5
//   Executes the '[' command:  if (*ptr == 0) goto loop-end
def loop_start after_loop_end_label < read_is_pointed_byte_zero, temp_byte {
    call read_is_pointed_byte_zero
    hex.if0 temp_byte, after_loop_end_label
}
// Time Complexity: 6.6w@ + 6@+5
//   Executes the ']' command:  if (*ptr != 0) goto loop-start
def loop_end after_loop_start_label < read_is_pointed_byte_zero, temp_byte {
    call read_is_pointed_byte_zero
    hex.if1 temp_byte, after_loop_start_label
}
read_is_pointed_byte_zero:  // space-complexity is about: 8,400 (according to the standard values).
    read_is_pointed_byte_zero_to_temp_byte_lsw
    return




brainfuck_start:

!!!HERE_THE_COMPILED_BRAINFUCK_OPS_WILL_BE!!!

stl.loop


brainfuck_memory:
reserve dw * !!!NUMBER_OF_BRAINFUCK_DATA_CELLS!!!
